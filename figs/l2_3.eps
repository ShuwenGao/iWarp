%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: l2_3.pdf
%%Creator: Adobe Acrobat 11.0.7
%%For: Shuwen
%%CreationDate: 2015/2/22, 23:59:07
%%BoundingBox: 0 0 467 464
%%HiResBoundingBox: 0 0 466.3681 463.4226
%%CropBox: 0 0 466.3681 463.4226
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 950 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2015-02-22T23:58:30-06:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2015-02-22T23:58:30-06:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Shuwen Gao</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
!CZqf$O@"<~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
\01hP$O@"<~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
HN<O8$O@"<~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
!CZqf!!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -463.423 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 463.423 li
466.368 463.423 li
466.368 0 li
cp
clp
gsave
-.855133 463.563 mo
467.145 463.563 li
467.145 -.436736 li
-.855133 -.436736 li
-.855133 463.563 li
clp
gsave
116.438 262.903 mo
108.111 262.903 li
108.111 247.664 li
116.438 247.664 li
116.438 262.903 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /DMSAAA+CALIBRI,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0bb518000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79667eeb25c2000081f0000069d268656164f03d3588000010480000
0036686865610d8d0bf20000108000000024686d7478e2c72797000010a4
00002fe46c6f63613bb757310000408800001e506d6178701c0316ba0000
5ed8000000206e616d65de4a558a00005ef800000d5c70726570c7f0742e
00006c540000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
fb040600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005deb840de832e5f0f3cf50019080000000000bbeb7ccc00000000
cf588f29fbdafd8d09ec0850000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008cb
040e0000000000000000000001cf000004d9001700000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000043c004f0000000000000000000000000000
000000000000050b008d0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000362008d000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0481008d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000740002b000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000447000a000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003cb005a00000000000000000000000000000000
0000000004910086000000000000000000000000038f0086000000000000
000000000000000000000000000000000000000000000000000000000000
035800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002fc00860000000000000000000000000000000000000000
0648008604c70086000000000000000000000000000000000000000004da
005500000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000003fd008600000000000000000425
0086000000000000000000000000036f0043000000000000000000000000
0000000000000000037b001b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000068a002b0000000000000000000000000000
00000000000003cd000b0000000000000000000000000000000000000000
00000000000000000000000003f300470000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000407004a00000000000000000000000000000000000000000000
000000000000000000000000000002880019000000000000000004ce0019
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000046f00190000000000000000
0000000006b60019051600190000000000000000075e0019000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001f7
007e000000000000000000000000000000000000000000000000044b007e
000000000000000000000000000000000000000000000000044d00480000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000044b007e000000000000000002d8007e0000
000000000000000000000331004900000000000000000000000000000000
0000000005d4004900000000000000000000000002c60017000000000000
000000000000051000170000000000000000000000000000000000000000
000000000000000000000000000000000000000005400017078a00170000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000005f60023
000000000000000000000000000000000000000003ca0016000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000002bf0036000000000000000002f5003a02c7003a01d0
001c00000000000000000000000000000000000000000176005a00000000
02f9005a02f5003902f5005a000000000200005a023a003c01fa001c0000
000000000000041b00200000000002a60017000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000027e006b027e006100000000000000000000000000000000
0259006d025900630000000000000000027e006b027e0061000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000004a8004e02de001903f2004f03f000430000000000000000
04420066000000000000000000000000040e0039040e0094040e0058040e
00550000000000000000040e005400000000000000000000000004740058
02ad001c03a000510385004d000000000000000003ce0058000000000000
000000000000039f0037039f0079039f0050039f00530000000000000000
039f004500000000000000000000000004a8004e02de001903f2004f03f0
0043000000000000000004420066000000000000000000000000040e0039
040e0094040e0058040e00550000000000000000040e0054000000000000
000000000000032f003d0205001d02b4003e02b000380000000000000000
02e4004b00000000000000000000000000000000000000000000000001c7
004d01c70047032f003d0205001d02b4003e02b000380000000000000000
02e4004b00000000000000000000000000000000000000000000000001c7
004d01c7004702b5002f0205002502700030027400230000000000000000
027a002a00000000000000000000000002b5002f02050025027000300274
00230000000000000000027a002a00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000031300180000000003160054036b007800000000000000000000
00000000000000000000000000000000000002670078049a007800000000
000000000000000000000000030d00780000000000000000000000000000
000004a10028000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000313
0018000000000000000000000000036b0078000000000000000000000000
0000000000000000000000000000000002670078049a0078000000000000
0000000000000000000000000000030d0078000000000000000004a10028
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000009e009e009e009e
014d014d014d014d014d014d014d014d014d014d014d014d014d014d01e0
01e001e001e001e001e0024a024a024a024a024a024a024a024a024a024a
024a024a024a024a024a024a024a024a024a024a024a024a024a024a024a
024a024a024a024a024a024a024a024a024a024a024a024a024a02990299
0299029902990299035d035d035d035d035d035d035d035d035d035d035d
035d035d035d035d035d035d035d035d035d035d035d040e040e040e040e
040e040e040e040e040e040e040e040e040e040e040e040e040e040e040e
040e040e040e040e040e040e040e04a804a804a804a804a804a804a804a8
04a804a804a804a804a804a804a805100510051005100510051005100510
05100510051005100510051005770577057705770577057705bc05bc05bc
05bc061b061b061b061b061b061b061b061b061b061b066a066a066a066a
066a066a066a066a066a066a066a066a066a066a066a066a066a066a066a
066a066a066a066a066a069f069f069f069f069f069f0715078007800780
07800780078007ce07ce07ce07ce07ce07ce07ce07ce07ce07ce07ce07ce
08280828082808a508a508a508a5092e092e092e092e092e092e096e096e
096e096e096e096e096e096e096e096e096e096e096e096e096e096e09f4
09f409f409f409f409f40a460a460a460a460a460a460a460a460a460b32
0b320b320b320b320b320b320b320b320b320b320b320b320b320b320b32
0b320b320b320b320b320b320b320b320bce0bce0bce0bce0c9a0c9a0c9a
0c9a0c9a0c9a0c9a0c9a0c9a0c9a0d240d240d240dd00dd00dd00dd00dd0
0dd00dd00dd00dd00dd00dd00dd00dd00dd00dd00dd00dd00dd00dd00dd0
0dd00dd00dd00dd00dd00dd00dd00dd00e5b0e5b0e5b0e5b0f2a0fdb0fdb
0fdb10d610d610d610d610d610d610d610d610d610d610d610d610d610d6
10d610d610d610d610d610d610d610d610d610d610d610d610d610d610d6
10d610d610d61118111811181118111811181118119f119f119f119f119f
119f119f12121212121212121212121212121212121212121212121212b4
12b412b41333133313331333140614061406140614061406150715071507
1507159e159e159e159e164e164e164e164e164e164e164e164e164e164e
164e16fe17f517f517f517f517f517f517f517f517f517f517f517f517f5
17f517f517f517f517f517f517f517f517f517f518a818a818a818a818a8
18a819181918191819181918191819181918191819181918191819871987
198719ed1a501ab11ab11ab11ab11ab11ab11ade1ade1b341b7d1be71be7
1c3a1cb01d091d091d091d991d991df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11df11df1
1df11df11df11df11df11df11df11df11df11df11df11df11df11e3f1e3f
1e3f1e3f1e3f1e3f1e3f1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c
1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c
1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c1e8c
1e8c1e8c1e8c1e8c1e8c1ed41f1c1f1c1f1c1f1c1f1c1f641fad1fad1fad
1fb51fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd1fbd
200c200c200c200c200c200c200c200c200c200c200c200c200c200c200c
200c200c200c200c200c200c200c200c200c200c200c200c200c200c200c
200c200c200c200c200c205a209d211621be21be21be223c223c223c223c
228a22e6235723f923f923f924cd24cd24cd24cd251b255e25d3267f267f
267f26fe26fe26fe26fe274e27a827b027b827b827b82833283328332833
288228c4293f29e529e529e529ed29ed29ed29ed2a8f2b2d2c0b2d1d2d1d
2d1d2d252d252d252d252d2e2d372d402d492d492d492d522d522d522d52
2d522d522d522d5b2d642daf2df12e582ee82ee82ee82f5a2f5a2f5a2f5a
2f5a2f5a2f5a2fa12fe93034307730d9317d317d317d31f731f731f731f7
320032093212321b321b321b322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322432243224
322432243224322432243224322432243224322432243224322c322c3298
32a032a032a032a032a032a032a032a032a832b032b032b032b032b032b8
32b832b832b832b832c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c032c032c032c032c032c032c032c032c032c032c032c032c0
32c032c032c0332433243324332433693369336933693369336933693369
339733f933f933f933f933f933f9346c346c346c34e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e934e934e934e934e934e934e934e934e934e934e9
34e934e934e934e934e9000100000f27009300050059000200020010002f
006000000c63159c000100010000002d0222000000030000000000640000
0000000300000001000e006400000003000000020008032a000000030000
0003002e030400000003000000040018031a000000030000000500180332
00000003000000060018034a000000030000000700760362000000030000
0008002a000e0000000300000009002003d8000000030000000a02a00064
000000030000000b005603f8000000030000000c002a044e000000030000
000d02980478000000030000000e006c071000010000000000000032077c
0001000000000001000707ae000100000000000200040911000100000000
0003001708fe0001000000000004000c09090001000000000005000c0915
0001000000000006000c09210001000000000007003b092d000100000000
000800150783000100000000000900100968000100000000000a015007ae
000100000000000b002b0978000100000000000c001509a3000100000000
000d014c09b8000100000000000e00360b04000300010409000000640000
0003000104090001000e006400030001040900020008032a000300010409
0003002e030400030001040900040018031a000300010409000500180332
00030001040900060018034a000300010409000700760362000300010409
0008002a000e0003000104090009002003d8000300010409000a02a00064
000300010409000b005603f8000300010409000c002a044e000300010409
000d02980478000300010409000e006c071000a900200032003000310034
0020004d006900630072006f0073006f0066007400200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0043
0061006c0069006200720069002000690073002000610020006d006f0064
00650072006e002000730061006e00730020007300650072006900660020
00660061006d0069006c0079002000770069007400680020007300750062
0074006c006500200072006f0075006e00640069006e006700730020006f
006e0020007300740065006d007300200061006e006400200063006f0072
006e006500720073002e0020004900740020006600650061007400750072
006500730020007200650061006c0020006900740061006c006900630073
002c00200073006d0061006c006c00200063006100700073002c00200061
006e00640020006d0075006c007400690070006c00650020006e0075006d
006500720061006c00200073006500740073002e00200049007400730020
00700072006f0070006f007200740069006f006e007300200061006c006c
006f00770020006800690067006800200069006d00700061006300740020
0069006e002000740069006700680074006c007900200073006500740020
006c0069006e006500730020006f0066002000620069006700200061006e
006400200073006d0061006c006c0020007400650078007400200061006c
0069006b0065002e002000430061006c0069006200720069002700730020
006d0061006e0079002000630075007200760065007300200061006e0064
00200074006800650020006e006500770020007200610073007400650072
00690073006500720020007400650061006d00200075007000200069006e
0020006200690067006700650072002000730069007a0065007300200074
006f002000720065007600650061006c002000610020007700610072006d
00200061006e006400200073006f00660074002000630068006100720061
0063007400650072002e004d006900630072006f0073006f00660074003a
002000430061006c006900620072006900200042006f006c006400560065
007200730069006f006e00200035002e0038003700430061006c00690062
00720069002d0042006f006c006400430061006c00690062007200690020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200074006800650020004d006900630072006f0073006f0066
0074002000670072006f007500700020006f006600200063006f006d0070
0061006e006900650073002e004c00750063002800610073002900200064
0065002000470072006f006f00740068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f00630074
0066006f006e007400730068007400740070003a002f002f0066006f006e
007400660061006200720069006b002e0063006f006d0059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e00740020006100730020007000650072006d00690074007400650064
0020006200790020007400680065002000450055004c004100200066006f
00720020007400680065002000700072006f006400750063007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e007400200069007300200069006e0063006c00750064006500640020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e0074002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002e00680074
00740070003a002f002f007700770077002e006d006900630072006f0073
006f00660074002e0063006f006d002f007400790070006f006700720061
007000680079002f0066006f006e00740073002f00640065006600610075
006c0074002e0061007300700078a92032303134204d6963726f736f6674
20436f72706f726174696f6e2e20416c6c20526967687473205265736572
7665642e43616c696272692069732061206d6f6465726e2073616e732073
657269662066616d696c79207769746820737562746c6520726f756e6469
6e6773206f6e207374656d7320616e6420636f726e6572732e2049742066
65617475726573207265616c206974616c6963732c20736d616c6c206361
70732c20616e64206d756c7469706c65206e756d6572616c20736574732e
204974732070726f706f7274696f6e7320616c6c6f77206869676820696d
7061637420696e2074696768746c7920736574206c696e6573206f662062
696720616e6420736d616c6c207465787420616c696b652e2043616c6962
72692773206d616e792063757276657320616e6420746865206e65772072
617374657269736572207465616d20757020696e20626967676572207369
7a657320746f2072657665616c2061207761726d20616e6420736f667420
6368617261637465722e4d6963726f736f66743a2043616c696272692042
6f6c6456657273696f6e20352e383743616c696272692d426f6c6443616c
6962726920697320612074726164656d61726b206f6620746865204d6963
726f736f66742067726f7570206f6620636f6d70616e6965732e4c756328
6173292064652047726f6f74687474703a2f2f7777772e6d6963726f736f
66742e636f6d2f7479706f6772617068792f6374666f6e7473687474703a
2f2f666f6e7466616272696b2e636f6d596f75206d617920757365207468
697320666f6e74206173207065726d697474656420627920746865204555
4c4120666f72207468652070726f6475637420696e207768696368207468
697320666f6e7420697320696e636c7564656420746f20646973706c6179
20616e64207072696e7420636f6e74656e742e20596f75206d6179206f6e
6c792028692920656d626564207468697320666f6e7420696e20636f6e74
656e74206173207065726d69747465642062792074686520656d62656464
696e67207265737472696374696f6e7320696e636c7564656420696e2074
68697320666f6e743b20616e6420286969292074656d706f726172696c79
20646f776e6c6f6164207468697320666f6e7420746f2061207072696e74
6572206f72206f74686572206f75747075742064657669636520746f2068
656c70207072696e7420636f6e74656e742e687474703a2f2f7777772e6d
6963726f736f66742e636f6d2f7479706f6772617068792f666f6e74732f
64656661756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[16073 11019 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1172 62 <0001008d000003540514001a004bb10102435558b900150294400b00090f
5215180b0f014c15b8015db240065400183f1a4ded2b3f012fcded31301b
40090f5215180b0f014c15b8015db240065400183f1a4ded2b3f31305925
140e02232122263511343e0233321e02151121321e020354050a0f0afdaf
212d0d1e332627321e0d01970a0f0a056e1e291b0c272c04970a100a0606
0a100afbef0b1929>DMSAAA+CALIBRI,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>DMSAAA+CALIBRI,Bold AddT42Char 
DMSAAA+CALIBRI,Bold /CharStrings get begin
/L 62 def
end
DMSAAA+CALIBRI,Bold /Encoding get
dup 76 /L put
pop
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold /DMSAAA+CALIBRI,Bold findfont ct_VMDictPut
/SBCYBR+CALIBRI,Bold*1 
[76{/.notdef}rp /L 179{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
106.455 262.903 mo
(L)sh
grestore
gsave
127.813 262.903 mo
117.637 262.903 li
117.637 247.472 li
127.813 247.472 li
127.813 262.903 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
3 6034 1006 <00010058000003bc0525003e0112b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f1239
39ed012f5f5e5d2bedcd39392f2f10ed31305d2b005e5d5d015d5d1b4013
042c01042b01093a010939010b0040010f032ab80169b61138392020391b
b8ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e53103918
0b0f014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f
123939ed3130015f5e5d005e5d5d015d5d5925140e022321222e0235343e
0237373e0335342e0223220e0223222e0235343e0633321e0215140e0207
0721321e0203bc050a100afd181620140906101914e043522e1115293e2a
3b5b452e0d090d080503060a194362764065976431184c8a729701fe0a11
0c066b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c
1c2f22171f171118252318335b7d483f7a8dab719b0c1929>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/two 1006 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[50{/.notdef}rp /two 25{/.notdef}rp /L 179{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
116.605 262.903 mo
(2)sh
grestore
gsave
140.529 267.031 mo
135.443 267.031 li
135.443 246.224 li
140.529 246.224 li
140.529 267.031 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 15640 894 <0001006bfe9f021c059000230022bf001a01fa0000001001f90006000302
74b3151f0b85003f2f012ffdd6edd6ed3130010602151412171614060623
222e02272e0335343e02373e0333321e0202175456575206162d281c281b
0f033650351a1b364f35020c182920242e18030558c3fe61dadbfe63c610
17100804070b0768d3d7db7170dbd7d46905080703070e16>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/parenleft 894 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 40 /parenleft put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 179{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
134.195 262.903 mo
(\()sh
grestore
gsave
153.075 263.167 mo
142.563 263.167 li
142.563 246.632 li
153.075 246.632 li
153.075 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 5732 282 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/d 282 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 23{/.notdef}rp /d 
155{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
141.675 262.903 mo
(d)sh
grestore
gsave
164.945 263.167 mo
155.393 263.167 li
155.393 251.384 li
164.945 251.384 li
164.945 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 5260 258 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/a 258 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 155{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
154.554 262.903 mo
(a)sh
grestore
gsave
174.081 263.143 mo
166.665 263.143 li
166.665 248.816 li
174.081 248.816 li
174.081 263.143 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 10766 410 <00010017ffec028e04b1003a0093b10102435558b711110d3b2900232db8
025fb2170d2db8ffe8b40b0f014c2db8011fb323481d0db8ffe8b40b0f01
4c0db8011fb2174831b80147b240074d00183f1a4ded3fed2bcd3fed2b01
2f33fd32c4321112392f31301bb9002dffe8b40b0f014c2db8011fb32348
1d0db8ffe8b40b0f014c0db8011fb2174831b80147b240074d00183f1a4d
ed3fed2bcd3fed2b31305925140e0423222e02351123222635343e023333
35343e0233321e02151533321e02151406232311141633323e0233321e02
028e0b12232f371c4b6e48226b1314050a0f0a6a0b1d312425311c0cc20a
0f0a051413c32e3b1420191107060b06057a2c2f130f0b06264f785201c9
2f371d28170ac70a100b05050b100ac70a17281d372ffe5d494907090707
1524>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/t 410 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 15{/.notdef}rp /t 139{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
166.401 262.903 mo
(t)sh
grestore
gsave
185.113 263.167 mo
175.561 263.167 li
175.561 251.384 li
185.113 251.384 li
185.113 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
174.721 262.903 mo
(a)sh
grestore
gsave
204.043 263.167 mo
192.835 263.167 li
192.835 251.384 li
204.043 251.384 li
204.043 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 9022 381 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/o 381 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 10{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
191.995 262.903 mo
(o)sh
grestore
gsave
216.369 262.975 mo
206.385 262.975 li
206.385 251.384 li
216.369 251.384 li
216.369 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 8752 374 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/n 374 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 9{/.notdef}rp /n /o 4{/.notdef}rp /t 139{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
204.897 262.903 mo
(n)sh
grestore
gsave
222.216 262.975 mo
219.264 262.975 li
219.264 246.584 li
222.216 246.584 li
222.216 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 8620 367 <0001007efffa017a05700015003fb10102435558400f0d15010b0b010b0a
010d00010b0400b80260b5400a1046054c00183f3f012f1a4ded31305f5e
5d5d5d5d1bb31046054c00183f3f31305925140e0223222e023511343e02
33321e0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a
0f0a05230a100b06060b100a>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/l 367 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 7{/.notdef}rp /l /.notdef /n /o 4{/.notdef}rp 
/t 139{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
217.776 262.903 mo
(l)sh
grestore
gsave
234.768 267.151 mo
223.938 267.151 li
223.938 251.576 li
234.768 251.576 li
234.768 267.151 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 12624 455 <00010016fe9503b403c600240068b10102435558b60109090e001a1bb802
42b640241a200a1a18b80273400f400e1a1f49190a13490a4b044f004b00
183f3f3f3f12393f01192f18d41a4ded12391a10dd1aed123912392fcd31
301b400c1f49190a13490a4b044f004b00183f3f3f3f12393f3130592103
060623222e023713262627012634363633321e02171333133e0233321616
140702836c09504d2830180207770d1505fecd0d18392f2b321c0e07d203
c006132c372b391b08fec4191607101811012b06190e033423251508030c
1917fdab02611a11080816251900>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/y 455 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d 7{/.notdef}rp /l /.notdef /n /o 4{/.notdef}rp 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
223.67 262.903 mo
(y)sh
grestore
gsave
248.239 262.975 mo
240.751 262.975 li
240.751 246.488 li
248.239 246.488 li
248.239 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 6452 296 <00010019fffa02980578003c0073b10102435558b31610001bb8025fb330
2a250ab8011db336471a26b8ffe8b40b0f014c26b8011fb6403048204c10
4800183f3f3f1a4ded2b323fed012fc433fdc433c431301bb9000a011db3
36471a26b8ffe8b40b0f014c26b8011fb6403048204c104800183f3f3f1a
4ded2b323fed31305901140e0223222e0223220e02151533321e02151406
232311140e0223222e02351123222635343e02333335343e0233321e0402
9804080a0607111922171b271a0ca3090f0a051413a30c1c322424311d0b
70131305090f0a6f244d77512746280e090404f21d23130707080711253b
2b520a17281d372ffd2e0a0f0a05050a0f0a02d22f371d28170a4b5b895b
2e0d0f0d1927>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/f 296 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef /n 
/o 4{/.notdef}rp /t 4{/.notdef}rp /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
240.464 262.903 mo
(f)sh
grestore
gsave
260.105 263.167 mo
248.897 263.167 li
248.897 251.384 li
260.105 251.384 li
260.105 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
248.057 262.903 mo
(o)sh
grestore
gsave
269.168 262.975 mo
262.448 262.975 li
262.448 251.384 li
269.168 251.384 li
269.168 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 9576 396 <0001007efffa02bb03d700330070b10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1a4ded2b5f5e5d012fc4ed3931301bb9000aff
e8b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1a
4ded2b31305901140e0223222e0223220e020711140e0223222e02351134
3e0233321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c
0c1d302525301d0c0a1a291f202a170a233e38381c0d1e20180b05040203
4b242e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a
0f0a6f3241260f0307090a0c152a>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/r 396 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two 25{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef /n 
/o 2{/.notdef}rp /r /.notdef /t 4{/.notdef}rp /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
260.96 262.903 mo
(r)sh
grestore
gsave
286.051 263.167 mo
275.923 263.167 li
275.923 247.472 li
286.051 247.472 li
286.051 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
3 6478 1007 <00010055ffe903b6052500580141b10102435558b70847010a46010b5ab8
ffc0b60f024d005a0131b802c9400d4e53264e40264e4e2640030e1bba02
e90000ffe8b40f024d000eb8ffe8400a0f024d000e010f030e45bb015600
3b0009015eb6113b113b111636b8ffe8b30b014d36b8ffe8b40b0f014c36
b80155b249532cb801044011202005495316180b014d16180b0f014c16b8
0156b240055600183f1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10
ed10ed012f5f5e5d2bd42bed1217392f2f2f11123910ed31305d2b005e5d
5d1b400d0847010a46010b005a010f0345bb0156003b0009015eb6113b11
3b111636b8ffe8b30b014d36b8ffe8b40b0f014c36b80155b249532cb801
044011202005495316180b014d16180b0f014c16b80156b240055600183f
1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10ed10ed3130015f5e5d
005e5d5d5901140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303b64a84b86d4274593a1209070310100a314c66
4137543b1d23456947700d120c05050b110c713a5a3d20162b442e345c49
330c080c0804020609143e5e7b485e9163331e3a5739446c4b28017b6196
6635131c1e10141b291d30251b1f1b1a2f43292d48331c0716271f1d2514
081b32472b213b2b191f25200714261e19211610132624192c53794c3b66
50380e0308355065>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/three 1007 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two /three 24{/.notdef}rp /L 20{/.notdef}rp 
/a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef 
/n /o 2{/.notdef}rp /r /.notdef /t 4{/.notdef}rp /y 
134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
274.915 262.903 mo
(3)sh
grestore
gsave
309.985 262.975 mo
292.905 262.975 li
292.905 251.576 li
309.985 251.576 li
309.985 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 12266 449 <00010023fffa05d303c600450097b10102435558b71c1d122e2c2c102ab8
0243400b1d10380e1004033a3a103cb8022b400d4003104149334910300b
0f483ab8ffd0b30b0f482cb8ffd0400e0b0f482c3a1003172549174c094c
00183f3f3f1217392b2b2b3f3f01192f18d41a4ded1239192f1239123939
1810d4ed1239192f3939123931301b400f414933492c3a1003172549174c
094c00183f3f3f1217393f3f31305901140607030e0323222e0227032707
030e0323222e022703262635343e0233321e0217131737133e0333321e02
17131737133e0333321e0205d30608ee0510213d31313e2310049602028a
040f243e31323d231004ec09050b1d312528321c0b03b10202a6030d1a2f
25252e1b0b03b20302aa020c1c3025252f1b0a03a00b201efcd911150c04
050c1510021e0909fde211150c04050c151003271d210b0a0f0904040a11
0cfd710c0c028f0c110a0405090f0afd6c0b0c028f0c110a0404090f>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/w 449 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two /three 24{/.notdef}rp /L 20{/.notdef}rp 
/a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef 
/n /o 2{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 
/.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
292.505 262.903 mo
(w)sh
grestore
gsave
320.779 263.167 mo
311.227 263.167 li
311.227 251.384 li
320.779 251.384 li
320.779 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
310.387 262.903 mo
(a)sh
grestore
gsave
330.443 262.975 mo
323.723 262.975 li
323.723 251.384 li
330.443 251.384 li
330.443 262.975 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
322.235 262.903 mo
(r)sh
grestore
gsave
342.766 267.151 mo
332.254 267.151 li
332.254 251.384 li
342.766 251.384 li
342.766 267.151 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 9252 393 <0002007efe95040003d7002a003d0096b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0205342e0223220e020711
161633323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e
29190a274b4e532f628a5728fefa11294332193133361e35603431452c15
01ed77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a
69283d29144d86b277396952310f223628feda4349325166>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/p 393 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two /three 24{/.notdef}rp /L 20{/.notdef}rp 
/a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp 
/w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
330.766 262.903 mo
(p)sh
grestore
gsave
352.501 263.167 mo
344.509 263.167 li
344.509 251.384 li
352.501 251.384 li
352.501 263.167 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 9830 400 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/s 400 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft 9{/.notdef}rp /two /three 24{/.notdef}rp /L 20{/.notdef}rp 
/a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r /s /t 2{/.notdef}rp 
/w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
343.645 262.903 mo
(s)sh
grestore
gsave
359.465 267.031 mo
354.354 267.031 li
354.354 246.224 li
359.465 246.224 li
359.465 267.031 li
clp
false sop
.0866102 .0627756 .0674144 0 cmyk
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 15784 895 <00010061fe9f0212059000210024b900000273b2121505bb01fa000f001f
01fbb3151a0a85003f2f012fedd6ed10d6ed313001140e02070e03232226
263437361235340227263e0233321e0217161202121a354f36030f1b281c
292d1606535756550503192d251f281a0b03686c021a71dbd7d368070b07
0408101710c4019fdbda019fc30d160e0703070805d2fe53>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/parenright 895 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 41 /parenright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[40{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 24{/.notdef}rp /L 
20{/.notdef}rp /a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
353.225 262.903 mo
(\))sh
grestore
417.835 275.228 mo
49.3249 275.228 li
49.3249 275.228 li
48.7035 275.228 48.1998 274.725 48.1998 274.103 cv
48.1998 274.103 li
48.1998 274.103 li
48.1998 274.103 li
48.1998 162.143 li
48.1998 161.847 48.3198 161.557 48.5294 161.348 cv
48.7389 161.138 49.0285 161.018 49.3249 161.018 cv
417.835 161.018 li
418.131 161.018 418.421 161.138 418.63 161.348 cv
418.84 161.557 418.96 161.847 418.96 162.143 cv
418.96 274.103 li
418.96 274.4 418.84 274.689 418.63 274.899 cv
418.421 275.108 418.131 275.228 417.835 275.228 cv
50.4498 272.978 mo
416.71 272.978 li
416.71 163.268 li
50.4498 163.268 li
50.4498 272.978 li
false sop
.0866102 .0627756 .0674144 0 cmyk
f
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8849 272.663 mo
416.395 272.663 li
416.395 160.703 li
47.8849 160.703 li
47.8849 272.663 li
/4 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
105.015 261.463 mo
(L)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
115.165 261.463 mo
(2)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if

2 0 3 <> SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/space 3 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
24{/.notdef}rp /L 20{/.notdef}rp /a 2{/.notdef}rp /d /.notdef /f 
5{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
127.329 261.463 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
132.755 261.463 mo
(\()sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
140.235 261.463 mo
(d)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
153.114 261.463 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
164.961 261.463 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
173.281 261.463 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
185.129 261.463 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
190.555 261.463 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
203.457 261.463 mo
(n)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
216.336 261.463 mo
(l)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
222.23 261.463 mo
(y)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
233.598 261.463 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
239.024 261.463 mo
(f)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
246.617 261.463 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
259.52 261.463 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
268.051 261.463 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
273.475 261.463 mo
(3)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
285.639 261.463 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
291.065 261.463 mo
(w)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
308.948 261.463 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
320.795 261.463 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
329.326 261.463 mo
(p)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
342.205 261.463 mo
(s)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
351.785 261.463 mo
(\))sh
5.36678 457.208 mo
457.78 457.208 li
457.78 304.618 li
6.49187 304.618 li
6.49187 458.333 li
6.49187 458.955 5.98821 459.458 5.36678 459.458 cv
4.74554 459.458 4.24188 458.955 4.24188 458.333 cv
4.24188 303.493 li
4.24188 303.197 4.36189 302.907 4.57142 302.698 cv
4.78094 302.488 5.0706 302.368 5.36678 302.368 cv
458.905 302.368 li
459.201 302.368 459.491 302.488 459.7 302.698 cv
459.91 302.907 460.03 303.197 460.03 303.493 cv
460.03 458.333 li
460.03 458.629 459.91 458.919 459.7 459.129 cv
459.491 459.338 459.201 459.458 458.905 459.458 cv
5.36678 459.458 li
4.74554 459.458 4.24188 458.955 4.24188 458.333 cv
4.24188 457.712 4.74554 457.208 5.36678 457.208 cv
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 960 24 <0002008d000004c0050e0012001f0071b10102435558bf0013029b000000
1a029200090018ffe8b40b0f014c18b8012e40090e511b180b0f014c1bb8
0154b240055400183f1a4ded2b3fed2b012fedd4ed31301bb90018ffe8b4
0b0f014c18b8012e40090e511b180b0f014c1bb80154b240055400183f1a
4ded2b3fed2b31305901140e0223212226351134363321321e0205342e02
23231133323e0204c05daef9acfecb212d2d21014cadf1a556fef02b5f95
7985896c946331029ab2fda04b272c04682c27519feaa35c9e7441fc9038
71a8>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/D 24 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 68 /D put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
16{/.notdef}rp /D 7{/.notdef}rp /L 20{/.notdef}rp /a 2{/.notdef}rp /d 
/.notdef /f 5{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t 2{/.notdef}rp /w /.notdef /y 
134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
95.7949 451.133 mo
(D)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 1722 90 <0002008dfffa044d050e00360044009db10102435558b4102e11290abb02
c600000037029bb2293f11b80293b21c2e10b8ffe8b40b0f014c10b80125
b34040173db8ffe8b40b0f014c3db80129b64021511755055500183f3f3f
1a4ded2b12392fed2b39012fed32d4edd4ed1112393931301bb12e10b8ff
e8b40b0f014c10b80125b34040173db8ffe8b40b0f014c3db80129b64021
511755055500183f3f3f1a4ded2b12392fed2b3931305925140e0223222e
0227032e03232311140e0223222e023511343633213216171e0315140e02
071e031717161601342627262623231133323e02044d081e3a322a321d0c
0474152831402a520d1e322726331e0c2d21014f33421b4e7d572e21405e
3c1d332d28136d0f0afead3a4214332d76863854381c220b0f0a04040b11
0c0121314c331afe130a100a06060a100a04972c2704030b3657774d416b
543e130e2839492eff262303644058120506fe911b314400>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/R 90 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
16{/.notdef}rp /D 7{/.notdef}rp /L 5{/.notdef}rp /R 14{/.notdef}rp /a 
2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t 2{/.notdef}rp /w 
/.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
110.924 451.133 mo
(R)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 316 4 <00020017fffa04c305140022002600e1b10102435558b90024ffe8b40b0f
014c23b8ffe8401e0b0f014c250c0d23180d0016010e16260b0a23220a00
2004230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d
160023221807121d521255055500183f3f3f1217393811331112392f5f5e
5d331a4ded3201192f5e5d1a18cd32337d87c4c40118c45e5d32337d87c4
c43130002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b801
2a401e400b000c0112030c0c271d2423231e0a0d160023221807121d5212
55055500183f3f3f1217393811331112392f5f5e5d331a4ded3231302b2b
59251616060623222e02270321070e03232226263637013e0333321e0217
0723032104b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c
018f0610233e333b46271106c201b7016f62242a15050309100d0104fd0e
130b0406172a23047c11150b03030b1613c6fdda>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/A 4 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 65 /A put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
13{/.notdef}rp /A 2{/.notdef}rp /D 7{/.notdef}rp /L 5{/.notdef}rp /R 
14{/.notdef}rp /a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
124.435 451.133 mo
(A)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 1330 68 <0001008dfffa0671050e003c00d9b10102435558400b0d3030172f2f0a2e
18181ab80264b424310c0c0ab80264b700243651190c0b18bb012d004000
2efff0b41023024c31b8fff040201023024c17101023024c0d101023024c
0d172f30312e061f28511f551255055500183f3f3f3f1217392b2b2b2b1a
4ded3232323f012fd4ed32113310ed32113311393d2f3333113331301bb5
3651190c0b18bb012d0040002efff0b41023024c31b8fff040201023024c
17101023024c0d101023024c0d172f30312e061f28511f55125505550018
3f3f3f3f1217392b2b2b2b1a4ded3232323f31305925140e0223222e0235
1123010e0323222e0227012311140e0223222e02351134363333321e0217
0133013e033333321e021506710b1d302524301c0c02fe8904121f302222
301f1203fe96020b1e2f2524301d0b362dac2e4230200c01180401220d1f
293825b11b27190d240a100a06060a100a041dfbe40d110a03050b100b04
1cfbe30a100a06060a100a048133360f23392afcfd03012a3a240f0e1b27
1900>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/M 68 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 77 /M put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
13{/.notdef}rp /A 2{/.notdef}rp /D 7{/.notdef}rp /L /M 4{/.notdef}rp 
/R 14{/.notdef}rp /a 2{/.notdef}rp /d /.notdef /f 5{/.notdef}rp 
/l /.notdef /n /o /p /.notdef /r /s 
/t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
138.978 451.133 mo
(M)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
159.954 451.133 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
165.385 451.133 mo
(\()sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
172.865 451.133 mo
(d)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
185.744 451.133 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
197.591 451.133 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
205.911 451.133 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
217.759 451.133 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
223.185 451.133 mo
(f)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
230.779 451.133 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
243.681 451.133 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
252.212 451.133 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
257.638 451.133 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
269.486 451.133 mo
(l)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
275.38 451.133 mo
(l)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
281.275 451.133 mo
( )sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
3 2346 970 <00020054ffe903d005240034004800e4b10102435558b9004affc0b70f02
4d004a012b3fb802abb40c1c1c0c35ba02810000ffe0400e0f024d000001
00000c010f030c3ab8ffe8b40b0f014c3ab8013eb330300526b8fff0b30b
014d26b8ffe8b40b0f014c26b8013f4009135944180b0f014c44b80140b2
40055f00183f1a4ded2b3fed2b2b12392fed2b012f5f5e5dd45d2bed1239
2f10ed3231305d2b1bb5004a010f033ab8ffe8b40b0f014c3ab8013eb330
300526b8fff0b30b014d26b8ffe8b40b0f014c26b8013f4009135944180b
0f014c44b80140b240055f00183f1a4ded2b3fed2b2b12392fed2b313001
5f5e5d5901140e0223222e0435343e0433321e0615140e0223222e022322
0e02073e0333321e0205342e0223220e0207141e0233323e0203d03c74aa
6f5a86623e250e0f2b4e7baf78264d422e0f08050203080e0a0c26364930
51704620011639434e2c628c592afefe1228422f1c36343015182f472f2e
452e1801b062a77945294d6e8aa25b4ca6a0916d40090e120d10131c141f
29170a0d100c3c67884c0e1c140d36648e70334d351b0a12190e6b8f5423
223e5300>SBCYBR+CALIBRI,Bold AddT42Char 
3 7026 1010 <ffff0054ffe903d00524020603ca0000>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/six 1010 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
2{/.notdef}rp /six 10{/.notdef}rp /A 2{/.notdef}rp /D 7{/.notdef}rp /L 
/M 4{/.notdef}rp /R 14{/.notdef}rp /a 2{/.notdef}rp /d /.notdef 
/f 5{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
286.695 451.133 mo
(6)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
298.859 451.133 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
304.285 451.133 mo
(w)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
322.168 451.133 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
334.015 451.133 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
342.546 451.133 mo
(p)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
355.425 451.133 mo
(s)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
365.005 451.133 mo
(\))sh
49.6648 315.763 mo
49.5738 304.618 li
63.0697 304.618 li
63.1548 315.653 li
49.6648 315.763 li
63.0523 302.368 mo
49.5554 302.368 li
49.4848 293.723 li
36.3929 293.823 li
56.0849 275.633 li
76.0748 293.503 li
62.9848 293.613 li
63.0523 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
63.0697 304.618 mo
49.5738 304.618 li
49.5554 302.368 li
63.0523 302.368 li
63.0697 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
56.0849 275.633 mo
36.3929 293.823 li
49.4848 293.723 li
49.6648 315.763 li
63.1548 315.653 li
62.9848 293.613 li
76.0748 293.503 li
56.0849 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
49.6659 315.888 mo
49.5399 315.764 li
49.4489 304.618 li
49.5738 304.618 li
49.6648 315.763 li
63.1548 315.653 li
63.0697 304.618 li
63.1948 304.618 li
63.2799 315.652 li
63.1558 315.778 li
49.6659 315.888 li
63.1775 302.368 mo
63.0523 302.368 li
62.9848 293.613 li
76.0748 293.503 li
56.0849 275.633 li
36.3929 293.823 li
49.4848 293.723 li
49.5554 302.368 li
49.4305 302.368 li
49.3609 293.849 li
36.3937 293.948 li
36.2766 293.869 li
36.3081 293.732 li
56.0001 275.541 li
56.0846 275.545 li
56.1683 275.54 li
76.1582 293.41 li
76.1918 293.547 li
76.0759 293.628 li
63.1109 293.737 li
63.1775 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
63.1948 304.618 mo
63.0697 304.618 li
63.0523 302.368 li
63.1775 302.368 li
63.1948 304.618 li
49.5738 304.618 mo
49.4489 304.618 li
49.4305 302.368 li
49.5554 302.368 li
49.5738 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
54.6449 274.193 mo
34.9529 292.383 li
48.0448 292.283 li
48.2249 314.323 li
61.7148 314.213 li
61.5448 292.173 li
74.6349 292.063 li
54.6449 274.193 li
eclp
75.2349 273.273 mo
75.5749 314.853 li
34.3869 315.183 li
34.0509 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [137.26 518.5 96.074 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
137.26 518.5 96.074 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
.25 lw
54.6449 274.193 mo
34.9529 292.383 li
48.0449 292.283 li
48.2249 314.323 li
61.7149 314.213 li
61.5449 292.173 li
74.6349 292.063 li
54.6449 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
19.5399 427.633 mo
90.4059 427.633 li
90.4059 314.243 li
19.5399 314.243 li
cp
.00482185 .265995 1 0 cmyk
ef
2.25 lw
19.5399 427.633 mo
90.4059 427.633 li
90.4059 314.243 li
19.5399 314.243 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 666 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/C 18 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 67 /C put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
2{/.notdef}rp /six 10{/.notdef}rp /A /.notdef /C /D 7{/.notdef}rp 
/L /M 4{/.notdef}rp /R 14{/.notdef}rp /a 2{/.notdef}rp /d 
/.notdef /f 5{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t 2{/.notdef}rp /w /.notdef /y 
134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
25.7819 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
38.4848 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
51.3872 349.343 mo
(r)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 6044 286 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/e 286 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 101 /e put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /three 
2{/.notdef}rp /six 10{/.notdef}rp /A /.notdef /C /D 7{/.notdef}rp 
/L /M 4{/.notdef}rp /R 14{/.notdef}rp /a 2{/.notdef}rp /d 
/e /f 5{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t 2{/.notdef}rp /w /.notdef /y 
134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
59.9185 349.343 mo
(e)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
3 5394 1004 <00020039ffe903d605250013002b00c7b10102435558b9002dffc0b60f02
4d002d0114ba02950000ffd4400a0f024d0000010f030020bb0295000a00
1bffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d25
180b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b012fedd45f
5e5d2bed31305d2b1b4012002d01092001090a010214010200010f031bb8
ffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d2518
0b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b015f5e5d5d5d
5d31305d5901140e0223222e0235343e0233321e0205342e0423220e0215
141e0233323e0403d63271b58385ae66293371b58285af6628fef70a151f
2c38223b4d2d12162f4a34273c2d1e1307028c9bfab05e5babf79c9afbb0
5e5babf7a95c8d68482b123972aa718ab56b2b19324c647e>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/zero 1004 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef 
/two /three 2{/.notdef}rp /six 10{/.notdef}rp /A /.notdef /C 
/D 7{/.notdef}rp /L /M 4{/.notdef}rp /R 14{/.notdef}rp /a 
2{/.notdef}rp /d /e /f 5{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t 2{/.notdef}rp /w 
/.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
72.0049 349.343 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
84.1693 349.343 mo
( )sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
2 2076 116 <0001002bfffa07140514003c007fb1010243555840092f0a0c003c30300c
32b8024d400a3c0c17180d2523230c22b80295401240180c37522a523023
0b03121d521255055500183f3f3f1217393f3f01192f18d41a4ded123919
2f393912391810d4ed1239192f123912393931301b400f37522a5230230b
03121d521255055500183f3f3f1217393f3f313059250e0323222e022703
23030e0323222e0227012626363633321e02171333133e0333321e021713
33133e0333321616060705df06152a42333945281205cf02c40512274337
3a45281206feda09021939332f371c0a03e301ec040d1f362d30391f0e04
f402e3030a1c342f2c3116030943181d0f05050f1d180334fccc171d1005
050f1d18046924291605030b1513fc2103d813180d05040d1814fc2803dc
10170d0505162b25>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/W 116 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 87 /W put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef 
/two /three 2{/.notdef}rp /six 10{/.notdef}rp /A /.notdef /C 
/D 7{/.notdef}rp /L /M 4{/.notdef}rp /R 4{/.notdef}rp /W 
9{/.notdef}rp /a 2{/.notdef}rp /d /e /f 5{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
38.0159 378.143 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
59.7649 378.143 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
31.4009 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
46.5295 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
58.3771 406.943 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
66.6974 406.943 mo
(a)sh
gsave
90.4049 427.633 mo
161.271 427.633 li
161.271 314.243 li
90.4049 314.243 li
90.4049 427.633 li
eclp
gsave
66.1449 449.563 mo
98.1449 449.563 li
98.1449 417.563 li
66.1449 417.563 li
66.1449 449.563 li
clp
66.1449 449.563 mo
98.1449 449.563 li
98.1449 417.563 li
66.1449 417.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 4.28973 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
98.1449 449.563 mo
130.145 449.563 li
130.145 417.563 li
98.1449 417.563 li
98.1449 449.563 li
clp
98.1449 449.563 mo
130.145 449.563 li
130.145 417.563 li
98.1449 417.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 36.2897 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
130.145 449.563 mo
162.145 449.563 li
162.145 417.563 li
130.145 417.563 li
130.145 449.563 li
clp
130.145 449.563 mo
162.145 449.563 li
162.145 417.563 li
130.145 417.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 68.2897 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
66.1449 417.563 mo
98.1449 417.563 li
98.1449 385.563 li
66.1449 385.563 li
66.1449 417.563 li
clp
66.1449 417.563 mo
98.1449 417.563 li
98.1449 385.563 li
66.1449 385.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 4.28973 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
98.1449 417.563 mo
130.145 417.563 li
130.145 385.563 li
98.1449 385.563 li
98.1449 417.563 li
clp
98.1449 417.563 mo
130.145 417.563 li
130.145 385.563 li
98.1449 385.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 36.2897 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
130.145 417.563 mo
162.145 417.563 li
162.145 385.563 li
130.145 385.563 li
130.145 417.563 li
clp
130.145 417.563 mo
162.145 417.563 li
162.145 385.563 li
130.145 385.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 68.2897 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
66.1449 385.563 mo
98.1449 385.563 li
98.1449 353.563 li
66.1449 353.563 li
66.1449 385.563 li
clp
66.1449 385.563 mo
98.1449 385.563 li
98.1449 353.563 li
66.1449 353.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 4.28973 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
98.1449 385.563 mo
130.145 385.563 li
130.145 353.563 li
98.1449 353.563 li
98.1449 385.563 li
clp
98.1449 385.563 mo
130.145 385.563 li
130.145 353.563 li
98.1449 353.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 36.2897 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
130.145 385.563 mo
162.145 385.563 li
162.145 353.563 li
130.145 353.563 li
130.145 385.563 li
clp
130.145 385.563 mo
162.145 385.563 li
162.145 353.563 li
130.145 353.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 68.2897 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
66.1449 353.563 mo
98.1449 353.563 li
98.1449 321.563 li
66.1449 321.563 li
66.1449 353.563 li
clp
66.1449 353.563 mo
98.1449 353.563 li
98.1449 321.563 li
66.1449 321.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 4.28973 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
98.1449 353.563 mo
130.145 353.563 li
130.145 321.563 li
98.1449 321.563 li
98.1449 353.563 li
clp
98.1449 353.563 mo
130.145 353.563 li
130.145 321.563 li
98.1449 321.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 36.2897 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
130.145 353.563 mo
162.145 353.563 li
162.145 321.563 li
130.145 321.563 li
130.145 353.563 li
clp
130.145 353.563 mo
162.145 353.563 li
162.145 321.563 li
130.145 321.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 68.2897 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
66.1449 321.563 mo
98.1449 321.563 li
98.1449 289.563 li
66.1449 289.563 li
66.1449 321.563 li
clp
66.1449 321.563 mo
98.1449 321.563 li
98.1449 289.563 li
66.1449 289.563 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 4.28973 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
98.1449 321.563 mo
130.145 321.563 li
130.145 289.563 li
98.1449 289.563 li
98.1449 321.563 li
clp
130.145 321.563 mo
98.1449 321.563 li
98.1449 315.368 li
120.407 315.368 li
120.41 315.764 li
120.536 315.888 li
130.145 315.81 li
130.145 321.563 li
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 7 36.2897 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 7 
/M[32 0 0 -7 0 7 ]
/MD false
/BC 1 
/D[0 255]
/DS 
<~AnGXebfn;TR@0J21G^gCAnGXebfn;TR@0J2!!!!!!!!!!!!%O6!!!!!!!!!!!!%O6!!!!!!!!!!!!!!!
!!!#9E4*q"\?sKi!!!!!KE2ni]RE7LCqk'%ZlsE!!<<*"!!!!!!!!!!TE/j/N%V>=!!!!!F=D2>^?mj[
>5JA%!!!!!)$!J5&H6VY)#/%[!!!!!!<<*"!!!!!!!!!!lmHc_*<7bn?m9S#!!!!!m.tZ2!!!!!!!!!!
!!!!!&H6VY@q@7m?m9S#!<<*"!!!!!!!!!!&-<sS~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
130.145 321.563 mo
162.145 321.563 li
162.145 289.563 li
130.145 289.563 li
130.145 321.563 li
clp
160.146 321.563 mo
130.145 321.563 li
130.145 315.81 li
134.026 315.778 li
134.114 315.741 li
134.15 315.652 li
134.148 315.368 li
160.146 315.368 li
160.146 321.563 li
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[31 0 0 7 68.2897 141.859 ]ct
snap_to_device
<<
/T 1
/W 31 
/H 7 
/M[31 0 0 -7 0 7 ]
/MD false
/BC 1 
/D[0 255]
/DS 
<~AnGXebfn;TR@0J21G^gCAnGXebfn;TR@0J2!!!!!!!!!!!!!!!!!!#9E4*q"\?sKi!!!!!KE2ni]RE7L
Cqk'%ZlsE!!<<*"!!!!!!!!!!TE/j/N%V>=!!!!!F=D2>^?mj[>5JA%!!!!!)$!J5&H6VY)#/%[!!!!!
!<<*"!!!!!!!!!!lmHc_*<7bn?m9S#!!!!!m.tZ2!!!!!!!!!!!!!!!&H6VY@q@7m?m9S#!<<*"!!!!!
!!!!!&-<sSqu@]:N%V>=!!!!!"=\=#^&~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
grestore
90.4049 427.633 mo
90.4049 426.508 li
160.146 426.508 li
160.146 315.368 li
91.5298 315.368 li
91.5298 427.633 li
90.4049 427.633 li
90.4049 426.508 li
90.4049 427.633 li
89.2798 427.633 li
89.2798 314.243 li
89.2798 313.947 89.3999 313.657 89.6094 313.448 cv
89.8189 313.238 90.1086 313.118 90.4049 313.118 cv
161.271 313.118 li
161.567 313.118 161.857 313.238 162.066 313.448 cv
162.276 313.657 162.396 313.947 162.396 314.243 cv
162.396 427.633 li
162.396 427.93 162.276 428.219 162.066 428.429 cv
161.857 428.638 161.567 428.758 161.271 428.758 cv
90.4049 428.758 li
90.1086 428.758 89.8189 428.638 89.6094 428.429 cv
89.3999 428.219 89.2798 427.93 89.2798 427.633 cv
90.4049 427.633 li
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
96.6449 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
109.348 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
122.25 349.343 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
130.782 349.343 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
142.865 349.343 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
108.885 378.143 mo
(W)sh
%ADOBeginSubsetFont: DMSAAA+CALIBRI,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBCYBR+CALIBRI,Bold gcheck setglobal} if
3 5718 1005 <00010094000003b00517002e00b5b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1a4ded5f5e5d323ffdcd012f2bcdc433fdcd31305f5d2b005d015d5d5d
1b4018292801292901092901092801082701011201403001031312b8017d
40092352290f10010b0510b8012bb240065400183f1a4ded5f5e5d323ffd
cd3130015f5d005d015d5d5d5d5d5925140e022321222e0235343e023333
11070606262635343e0237253e0333321e02151133321e0203b0060b0e09
fd36080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f18
08d3090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f16
0e08b40405030103070c09fbd30b1827>SBCYBR+CALIBRI,Bold AddT42Char 
SBCYBR+CALIBRI,Bold /CharStrings get begin
/one 1005 def
end
SBCYBR+CALIBRI,Bold /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SBCYBR+CALIBRI,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two /three 2{/.notdef}rp /six 10{/.notdef}rp /A /.notdef /C 
/D 7{/.notdef}rp /L /M 4{/.notdef}rp /R 4{/.notdef}rp /W 
9{/.notdef}rp /a 2{/.notdef}rp /d /e /f 5{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
SBCYBR+CALIBRI,Bold nf
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
130.635 378.143 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
102.265 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
117.394 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
129.241 406.943 mo
(t)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
137.561 406.943 mo
(a)sh
301.585 427.633 mo
372.451 427.633 li
372.451 314.243 li
301.585 314.243 li
301.585 427.633 li
.720088 .130068 0 0 cmyk
ef
301.585 427.633 mo
301.585 426.508 li
371.326 426.508 li
371.326 315.368 li
302.71 315.368 li
302.71 427.633 li
301.585 427.633 li
301.585 426.508 li
301.585 427.633 li
300.46 427.633 li
300.46 314.243 li
300.46 313.947 300.58 313.657 300.789 313.448 cv
300.999 313.238 301.288 313.118 301.585 313.118 cv
372.451 313.118 li
372.747 313.118 373.037 313.238 373.246 313.448 cv
373.456 313.657 373.576 313.947 373.576 314.243 cv
373.576 427.633 li
373.576 427.93 373.456 428.219 373.246 428.429 cv
373.037 428.638 372.747 428.758 372.451 428.758 cv
301.585 428.758 li
301.288 428.758 300.999 428.638 300.789 428.429 cv
300.58 428.219 300.46 427.93 300.46 427.633 cv
301.585 427.633 li
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
307.825 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
320.528 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
333.43 349.343 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
341.962 349.343 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
354.045 349.343 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
366.209 349.343 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
320.065 378.143 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
341.815 378.143 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
313.445 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
328.573 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
340.421 406.943 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
348.741 406.943 mo
(a)sh
gsave
372.455 427.633 mo
443.321 427.633 li
443.321 314.243 li
372.455 314.243 li
372.455 427.633 li
eclp
gsave
354.145 449.563 mo
386.145 449.563 li
386.145 417.563 li
354.145 417.563 li
354.145 449.563 li
clp
354.145 449.563 mo
386.145 449.563 li
386.145 417.563 li
354.145 417.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 292.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
386.145 449.563 mo
418.145 449.563 li
418.145 417.563 li
386.145 417.563 li
386.145 449.563 li
clp
386.145 449.563 mo
418.145 449.563 li
418.145 417.563 li
386.145 417.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 324.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
418.145 449.563 mo
450.145 449.563 li
450.145 417.563 li
418.145 417.563 li
418.145 449.563 li
clp
418.145 449.563 mo
450.145 449.563 li
450.145 417.563 li
418.145 417.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 356.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
354.145 417.563 mo
386.145 417.563 li
386.145 385.563 li
354.145 385.563 li
354.145 417.563 li
clp
354.145 417.563 mo
386.145 417.563 li
386.145 385.563 li
354.145 385.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 292.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
386.145 417.563 mo
418.145 417.563 li
418.145 385.563 li
386.145 385.563 li
386.145 417.563 li
clp
386.145 417.563 mo
418.145 417.563 li
418.145 385.563 li
386.145 385.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 324.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
418.145 417.563 mo
450.145 417.563 li
450.145 385.563 li
418.145 385.563 li
418.145 417.563 li
clp
418.145 417.563 mo
450.145 417.563 li
450.145 385.563 li
418.145 385.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 356.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
354.145 385.563 mo
386.145 385.563 li
386.145 353.563 li
354.145 353.563 li
354.145 385.563 li
clp
354.145 385.563 mo
386.145 385.563 li
386.145 353.563 li
354.145 353.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 292.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
386.145 385.563 mo
418.145 385.563 li
418.145 353.563 li
386.145 353.563 li
386.145 385.563 li
clp
386.145 385.563 mo
418.145 385.563 li
418.145 353.563 li
386.145 353.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 324.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
418.145 385.563 mo
450.145 385.563 li
450.145 353.563 li
418.145 353.563 li
418.145 385.563 li
clp
418.145 385.563 mo
450.145 385.563 li
450.145 353.563 li
418.145 353.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 356.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
354.145 353.563 mo
386.145 353.563 li
386.145 321.563 li
354.145 321.563 li
354.145 353.563 li
clp
354.145 353.563 mo
386.145 353.563 li
386.145 321.563 li
354.145 321.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 292.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
386.145 353.563 mo
418.145 353.563 li
418.145 321.563 li
386.145 321.563 li
386.145 353.563 li
clp
386.145 353.563 mo
418.145 353.563 li
418.145 321.563 li
386.145 321.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 324.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
418.145 353.563 mo
450.145 353.563 li
450.145 321.563 li
418.145 321.563 li
418.145 353.563 li
clp
418.145 353.563 mo
450.145 353.563 li
450.145 321.563 li
418.145 321.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 356.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
354.145 321.563 mo
386.145 321.563 li
386.145 289.563 li
354.145 289.563 li
354.145 321.563 li
clp
354.145 321.563 mo
386.145 321.563 li
386.145 289.563 li
354.145 289.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 292.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
386.145 321.563 mo
418.145 321.563 li
418.145 289.563 li
386.145 289.563 li
386.145 321.563 li
clp
418.145 321.563 mo
386.145 321.563 li
386.145 315.368 li
402.457 315.368 li
402.46 315.764 li
402.586 315.888 li
416.076 315.778 li
416.164 315.741 li
416.2 315.652 li
416.198 315.368 li
418.145 315.368 li
418.145 321.563 li
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 7 324.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 7 
/M[32 0 0 -7 0 7 ]
/MD false
/BC 1 
/D[0 255]
/DS 
<~AnGXebfn;TR@0J21G^gCAnGXebfn;TR@0J2piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLW
e9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3!<J,l!!!!!!!!!!
/1GQK!!!!!!!!!!!!!!!e9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLW
e9&\3piOLWe9&\3piOLWe9&\3piOLWe9&\3piOLW~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
418.145 321.563 mo
450.145 321.563 li
450.145 289.563 li
418.145 289.563 li
418.145 321.563 li
clp
418.145 321.563 mo
450.145 321.563 li
450.145 289.563 li
418.145 289.563 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 356.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
grestore
372.455 427.633 mo
372.455 426.508 li
442.196 426.508 li
442.196 315.368 li
373.58 315.368 li
373.58 427.633 li
372.455 427.633 li
372.455 426.508 li
372.455 427.633 li
371.33 427.633 li
371.33 314.243 li
371.33 313.947 371.45 313.657 371.659 313.448 cv
371.869 313.238 372.159 313.118 372.455 313.118 cv
443.321 313.118 li
443.617 313.118 443.907 313.238 444.116 313.448 cv
444.326 313.657 444.446 313.947 444.446 314.243 cv
444.446 427.633 li
444.446 427.93 444.326 428.219 444.116 428.429 cv
443.907 428.638 443.617 428.758 443.321 428.758 cv
372.455 428.758 li
372.159 428.758 371.869 428.638 371.659 428.429 cv
371.45 428.219 371.33 427.93 371.33 427.633 cv
372.455 427.633 li
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
378.695 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
391.398 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
404.3 349.343 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
412.832 349.343 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
424.915 349.343 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
437.079 349.343 mo
( )sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
390.925 378.143 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
412.675 378.143 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
384.315 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
399.444 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
411.291 406.943 mo
(t)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
419.611 406.943 mo
(a)sh
161.275 427.633 mo
232.141 427.633 li
232.141 314.243 li
161.275 314.243 li
161.275 427.633 li
.483131 0 .939818 0 cmyk
ef
161.275 427.633 mo
161.275 426.508 li
231.016 426.508 li
231.016 315.368 li
162.4 315.368 li
162.4 427.633 li
161.275 427.633 li
161.275 426.508 li
161.275 427.633 li
160.15 427.633 li
160.15 314.243 li
160.15 313.947 160.27 313.657 160.479 313.448 cv
160.689 313.238 160.979 313.118 161.275 313.118 cv
232.141 313.118 li
232.437 313.118 232.727 313.238 232.936 313.448 cv
233.146 313.657 233.266 313.947 233.266 314.243 cv
233.266 427.633 li
233.266 427.93 233.146 428.219 232.936 428.429 cv
232.727 428.638 232.437 428.758 232.141 428.758 cv
161.275 428.758 li
160.979 428.758 160.689 428.638 160.479 428.429 cv
160.27 428.219 160.15 427.93 160.15 427.633 cv
161.275 427.633 li
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
167.515 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
180.218 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
193.12 349.343 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
201.651 349.343 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
213.735 349.343 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
179.745 378.143 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
201.495 378.143 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
173.135 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
188.264 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
200.111 406.943 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
208.431 406.943 mo
(a)sh
gsave
232.135 427.633 mo
303.001 427.633 li
303.001 314.243 li
232.135 314.243 li
232.135 427.633 li
eclp
gsave
226.145 449.563 mo
258.145 449.563 li
258.145 417.563 li
226.145 417.563 li
226.145 449.563 li
clp
226.145 449.563 mo
258.145 449.563 li
258.145 417.563 li
226.145 417.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 164.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
258.145 449.563 mo
290.145 449.563 li
290.145 417.563 li
258.145 417.563 li
258.145 449.563 li
clp
258.145 449.563 mo
290.145 449.563 li
290.145 417.563 li
258.145 417.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 196.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
290.145 449.563 mo
322.145 449.563 li
322.145 417.563 li
290.145 417.563 li
290.145 449.563 li
clp
290.145 449.563 mo
322.145 449.563 li
322.145 417.563 li
290.145 417.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 228.29 13.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
226.145 417.563 mo
258.145 417.563 li
258.145 385.563 li
226.145 385.563 li
226.145 417.563 li
clp
226.145 417.563 mo
258.145 417.563 li
258.145 385.563 li
226.145 385.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 164.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
258.145 417.563 mo
290.145 417.563 li
290.145 385.563 li
258.145 385.563 li
258.145 417.563 li
clp
258.145 417.563 mo
290.145 417.563 li
290.145 385.563 li
258.145 385.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 196.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
290.145 417.563 mo
322.145 417.563 li
322.145 385.563 li
290.145 385.563 li
290.145 417.563 li
clp
290.145 417.563 mo
322.145 417.563 li
322.145 385.563 li
290.145 385.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 228.29 45.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
226.145 385.563 mo
258.145 385.563 li
258.145 353.563 li
226.145 353.563 li
226.145 385.563 li
clp
226.145 385.563 mo
258.145 385.563 li
258.145 353.563 li
226.145 353.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 164.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
258.145 385.563 mo
290.145 385.563 li
290.145 353.563 li
258.145 353.563 li
258.145 385.563 li
clp
258.145 385.563 mo
290.145 385.563 li
290.145 353.563 li
258.145 353.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 196.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
290.145 385.563 mo
322.145 385.563 li
322.145 353.563 li
290.145 353.563 li
290.145 385.563 li
clp
290.145 385.563 mo
322.145 385.563 li
322.145 353.563 li
290.145 353.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 228.29 77.8592 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
226.145 353.563 mo
258.145 353.563 li
258.145 321.563 li
226.145 321.563 li
226.145 353.563 li
clp
226.145 353.563 mo
258.145 353.563 li
258.145 321.563 li
226.145 321.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 164.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
258.145 353.563 mo
290.145 353.563 li
290.145 321.563 li
258.145 321.563 li
258.145 353.563 li
clp
258.145 353.563 mo
290.145 353.563 li
290.145 321.563 li
258.145 321.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 196.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
290.145 353.563 mo
322.145 353.563 li
322.145 321.563 li
290.145 321.563 li
290.145 353.563 li
clp
290.145 353.563 mo
322.145 353.563 li
322.145 321.563 li
290.145 321.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 228.29 109.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
226.145 321.563 mo
258.145 321.563 li
258.145 289.563 li
226.145 289.563 li
226.145 321.563 li
clp
226.145 321.563 mo
258.145 321.563 li
258.145 289.563 li
226.145 289.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 164.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
gsave
258.145 321.563 mo
290.145 321.563 li
290.145 289.563 li
258.145 289.563 li
258.145 321.563 li
clp
290.145 321.563 mo
258.145 321.563 li
258.145 315.368 li
262.137 315.368 li
262.14 315.764 li
262.266 315.888 li
275.756 315.778 li
275.844 315.741 li
275.88 315.652 li
275.877 315.368 li
290.145 315.368 li
290.145 321.563 li
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 7 196.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 7 
/M[32 0 0 -7 0 7 ]
/MD false
/BC 1 
/D[0 255]
/DS 
<~AnGXebfn;TR@0J21G^gCAnGXebfn;TR@0J2!!!!!oN#l?N%V>=r)R_G6mQa^!<M6h!!!!!!!!!!&;tH:
!!!!!!!!!!!!!!!)$%_c!!!!!!<KtDLrjQF=?V3F!!!!!!!!!!!!!!!!!!!!)$$H?!!!!!&;tH:!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!FB<Aj!!!!!Hrk4r!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!S6'V=!!!!!!!!!!!!!!!!!!!!!!!!!~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
290.145 321.563 mo
322.145 321.563 li
322.145 289.563 li
290.145 289.563 li
290.145 321.563 li
clp
290.145 321.563 mo
322.145 321.563 li
322.145 289.563 li
290.145 289.563 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 32 228.29 141.859 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP5.rA4CarQP8/
!1A?~>

%%EndBinary
grestore
np
grestore
grestore
232.135 427.633 mo
232.135 426.508 li
301.876 426.508 li
301.876 315.368 li
233.26 315.368 li
233.26 427.633 li
232.135 427.633 li
232.135 426.508 li
232.135 427.633 li
231.01 427.633 li
231.01 314.243 li
231.01 313.947 231.13 313.657 231.339 313.448 cv
231.549 313.238 231.839 313.118 232.135 313.118 cv
303.001 313.118 li
303.297 313.118 303.587 313.238 303.796 313.448 cv
304.006 313.657 304.126 313.947 304.126 314.243 cv
304.126 427.633 li
304.126 427.93 304.006 428.219 303.796 428.429 cv
303.587 428.638 303.297 428.758 303.001 428.758 cv
232.135 428.758 li
231.839 428.758 231.549 428.638 231.339 428.429 cv
231.13 428.219 231.01 427.93 231.01 427.633 cv
232.135 427.633 li
1 /4 /CSD get_res sepcs
.749 sep
f
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
238.385 349.343 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
251.088 349.343 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
263.99 349.343 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
272.522 349.343 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
284.595 349.343 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
250.615 378.143 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
272.365 378.143 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
243.995 406.943 mo
(D)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
259.124 406.943 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
270.971 406.943 mo
(t)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [23.9998 0 0 -23.9998 0 0 ]msf
279.291 406.943 mo
(a)sh
134.004 313.118 mo
120.513 313.118 li
120.444 304.618 li
133.935 304.618 li
134.004 313.118 li
133.916 302.368 mo
120.425 302.368 li
120.355 293.723 li
107.255 293.823 li
126.955 275.633 li
146.945 293.503 li
133.845 293.613 li
133.916 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
133.935 304.618 mo
120.444 304.618 li
120.425 302.368 li
133.916 302.368 li
133.935 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
120.535 315.763 mo
120.532 315.368 li
130.145 315.368 li
130.145 315.685 li
120.535 315.763 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[12 0 0 3 57.2897 145.859 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 3 
/M[12 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~*??+>*??+>*??+>*?6%>*?6%>*?6%=*#ot>*#ot>*#ot>~>
<~()A\^()A\^()A\^(,I`^(,I`^(,Ia&1G]d^1G]d^1G]d^~>
<~(Djj$(Djj$(Djj$(Vd^$(Vd^$(Vd`"^V:R$^V:R$^V:R$~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
130.145 315.685 mo
130.145 315.368 li
134.022 315.368 li
134.025 315.653 li
130.145 315.685 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[6 0 0 3 67.2897 145.859 ]ct
snap_to_device
<<
/T 1
/W 6 
/H 3 
/M[6 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~*#ot>*#ot>*?6%>*??+>*?>~>
<~1G]d^1G]d^(,I`^()A\^()?~>
<~^V:R$^V:R$(Vd^$(Djj$(Dd~>
<~!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
134.022 315.368 mo
130.145 315.368 li
120.532 315.368 li
120.513 313.118 li
134.004 313.118 li
134.022 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
126.955 275.633 mo
107.255 293.823 li
120.355 293.723 li
120.535 315.763 li
134.025 315.653 li
133.845 293.613 li
146.945 293.503 li
126.955 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
134.129 313.118 mo
134.004 313.118 li
133.935 304.618 li
134.06 304.618 li
134.129 313.118 li
120.513 313.118 mo
120.388 313.118 li
120.319 304.618 li
120.444 304.618 li
120.513 313.118 li
134.041 302.368 mo
133.916 302.368 li
133.845 293.613 li
146.945 293.503 li
126.955 275.633 li
107.255 293.823 li
120.355 293.723 li
120.425 302.368 li
120.301 302.368 li
120.231 293.849 li
107.256 293.948 li
107.139 293.869 li
107.17 293.732 li
126.87 275.541 li
126.955 275.545 li
127.038 275.54 li
147.028 293.41 li
147.062 293.547 li
146.946 293.628 li
133.971 293.737 li
134.041 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
134.06 304.618 mo
133.935 304.618 li
133.916 302.368 li
134.041 302.368 li
134.06 304.618 li
120.444 304.618 mo
120.319 304.618 li
120.301 302.368 li
120.425 302.368 li
120.444 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
120.536 315.888 mo
120.41 315.764 li
120.407 315.368 li
120.532 315.368 li
120.535 315.763 li
130.145 315.685 li
130.145 315.81 li
120.536 315.888 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[12 0 0 3 57.2897 145.859 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 3 
/M[12 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~*??+>*??+>*??+>*?6%>*?6%>*?6%=*#ot>*#ot>*#ot>~>
<~()A\^()A\^()A\^(,I`^(,I`^(,Ia&1G]d^1G]d^1G]d^~>
<~(Djj$(Djj$(Djj$(Vd^$(Vd^$(Vd`"^V:R$^V:R$^V:R$~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
130.145 315.81 mo
130.145 315.685 li
134.025 315.653 li
134.022 315.368 li
134.148 315.368 li
134.15 315.652 li
134.114 315.741 li
134.026 315.778 li
130.145 315.81 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[6 0 0 3 67.2897 145.859 ]ct
snap_to_device
<<
/T 1
/W 6 
/H 3 
/M[6 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~*#ot>*#ot>*?6%>*??+>*?>~>
<~1G]d^1G]d^(,I`^()A\^()?~>
<~^V:R$^V:R$(Vd^$(Djj$(Dd~>
<~!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
134.148 315.368 mo
134.022 315.368 li
134.004 313.118 li
134.129 313.118 li
134.148 315.368 li
120.532 315.368 mo
120.407 315.368 li
120.388 313.118 li
120.513 313.118 li
120.532 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
125.515 274.193 mo
105.815 292.383 li
118.915 292.283 li
119.095 314.323 li
132.585 314.213 li
132.405 292.173 li
145.505 292.063 li
125.515 274.193 li
eclp
146.105 273.273 mo
146.435 314.853 li
105.255 315.183 li
104.915 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [208.12 518.5 166.94 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
208.12 518.5 166.94 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
.25 lw
125.515 274.193 mo
105.815 292.383 li
118.915 292.283 li
119.095 314.323 li
132.585 314.213 li
132.405 292.173 li
145.505 292.063 li
125.515 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
204.874 313.118 mo
191.374 313.118 li
191.309 304.618 li
204.805 304.618 li
204.874 313.118 li
204.786 302.368 mo
191.291 302.368 li
191.225 293.723 li
178.125 293.823 li
197.825 275.633 li
217.805 293.503 li
204.715 293.613 li
204.786 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
204.805 304.618 mo
191.309 304.618 li
191.291 302.368 li
204.786 302.368 li
204.805 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
191.395 315.763 mo
191.392 315.368 li
204.892 315.368 li
204.895 315.653 li
191.395 315.763 li
.350164 .0374151 .587762 0 cmyk
f
204.892 315.368 mo
191.392 315.368 li
191.374 313.118 li
204.874 313.118 li
204.892 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
197.825 275.633 mo
178.125 293.823 li
191.225 293.723 li
191.395 315.763 li
204.895 315.653 li
204.715 293.613 li
217.805 293.503 li
197.825 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
204.999 313.118 mo
204.874 313.118 li
204.805 304.618 li
204.93 304.618 li
204.999 313.118 li
191.374 313.118 mo
191.25 313.118 li
191.184 304.618 li
191.309 304.618 li
191.374 313.118 li
204.911 302.368 mo
204.786 302.368 li
204.715 293.613 li
217.805 293.503 li
197.825 275.633 li
178.125 293.823 li
191.225 293.723 li
191.291 302.368 li
191.167 302.368 li
191.101 293.849 li
178.126 293.948 li
178.009 293.869 li
178.04 293.732 li
197.74 275.541 li
197.825 275.545 li
197.908 275.54 li
217.888 293.41 li
217.922 293.547 li
217.806 293.628 li
204.841 293.737 li
204.911 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
204.93 304.618 mo
204.805 304.618 li
204.786 302.368 li
204.911 302.368 li
204.93 304.618 li
191.309 304.618 mo
191.184 304.618 li
191.167 302.368 li
191.291 302.368 li
191.309 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
191.396 315.888 mo
191.307 315.852 li
191.27 315.764 li
191.267 315.368 li
191.392 315.368 li
191.395 315.763 li
204.895 315.653 li
204.892 315.368 li
205.018 315.368 li
205.02 315.652 li
204.984 315.741 li
204.896 315.778 li
191.396 315.888 li
.350164 .0374151 .587762 0 cmyk
f
205.018 315.368 mo
204.892 315.368 li
204.874 313.118 li
204.999 313.118 li
205.018 315.368 li
191.392 315.368 mo
191.267 315.368 li
191.25 313.118 li
191.374 313.118 li
191.392 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
196.385 274.193 mo
176.685 292.383 li
189.785 292.283 li
189.955 314.323 li
203.455 314.213 li
203.275 292.173 li
216.365 292.063 li
196.385 274.193 li
eclp
216.965 273.273 mo
217.305 314.853 li
176.115 315.183 li
175.785 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [278.99 518.5 237.81 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
278.99 518.5 237.81 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
196.385 274.193 mo
176.685 292.383 li
189.785 292.283 li
189.955 314.323 li
203.455 314.213 li
203.275 292.173 li
216.365 292.063 li
196.385 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
275.734 313.118 mo
262.243 313.118 li
262.174 304.618 li
275.665 304.618 li
275.734 313.118 li
275.646 302.368 mo
262.155 302.368 li
262.085 293.723 li
248.995 293.823 li
268.685 275.633 li
288.675 293.503 li
275.575 293.613 li
275.646 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
275.665 304.618 mo
262.174 304.618 li
262.155 302.368 li
275.646 302.368 li
275.665 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
262.265 315.763 mo
262.262 315.368 li
275.752 315.368 li
275.755 315.653 li
262.265 315.763 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[16 0 0 3 199.29 145.859 ]ct
snap_to_device
<<
/T 1
/W 16 
/H 3 
/M[16 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~=]lac=]lac=]lac=]lac=WJMc=WJMc=WJMc=WJMc*?A9c*?A9c*?A9c*?A9c~>
<~$47Oa$47Oa$47Oa$47Oa$5OBa$5OBa$5OBa$5OBa()@5a()@5a()@5a()@5a~>
<~QBi='QBi='QBi='QBi='Q5:@'Q5:@'Q5:@'Q5:@'(DiC'(DiC'(DiC'(DiC'~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
275.752 315.368 mo
262.262 315.368 li
262.243 313.118 li
275.734 313.118 li
275.752 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
268.685 275.633 mo
248.995 293.823 li
262.085 293.723 li
262.265 315.763 li
275.755 315.653 li
275.575 293.613 li
288.675 293.503 li
268.685 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
275.859 313.118 mo
275.734 313.118 li
275.665 304.618 li
275.79 304.618 li
275.859 313.118 li
262.243 313.118 mo
262.118 313.118 li
262.049 304.618 li
262.174 304.618 li
262.243 313.118 li
275.771 302.368 mo
275.646 302.368 li
275.575 293.613 li
288.675 293.503 li
268.685 275.633 li
248.995 293.823 li
262.085 293.723 li
262.155 302.368 li
262.031 302.368 li
261.961 293.849 li
248.996 293.948 li
248.879 293.869 li
248.91 293.732 li
268.6 275.541 li
268.685 275.545 li
268.768 275.54 li
288.758 293.41 li
288.792 293.547 li
288.676 293.628 li
275.701 293.737 li
275.771 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
275.79 304.618 mo
275.665 304.618 li
275.646 302.368 li
275.771 302.368 li
275.79 304.618 li
262.174 304.618 mo
262.049 304.618 li
262.031 302.368 li
262.155 302.368 li
262.174 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
262.266 315.888 mo
262.14 315.764 li
262.137 315.368 li
262.262 315.368 li
262.265 315.763 li
275.755 315.653 li
275.752 315.368 li
275.877 315.368 li
275.88 315.652 li
275.844 315.741 li
275.756 315.778 li
262.266 315.888 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[16 0 0 3 199.29 145.859 ]ct
snap_to_device
<<
/T 1
/W 16 
/H 3 
/M[16 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~=]lac=]lac=]lac=]lac=WJMc=WJMc=WJMc=WJMc*?A9c*?A9c*?A9c*?A9c~>
<~$47Oa$47Oa$47Oa$47Oa$5OBa$5OBa$5OBa$5OBa()@5a()@5a()@5a()@5a~>
<~QBi='QBi='QBi='QBi='Q5:@'Q5:@'Q5:@'Q5:@'(DiC'(DiC'(DiC'(DiC'~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
275.877 315.368 mo
275.752 315.368 li
275.734 313.118 li
275.859 313.118 li
275.877 315.368 li
262.262 315.368 mo
262.137 315.368 li
262.118 313.118 li
262.243 313.118 li
262.262 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
267.245 274.193 mo
247.555 292.383 li
260.645 292.283 li
260.825 314.323 li
274.315 314.213 li
274.135 292.173 li
287.235 292.063 li
267.245 274.193 li
eclp
287.835 273.273 mo
288.165 314.853 li
246.985 315.183 li
246.645 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [349.86 518.5 308.67 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /3 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
349.86 518.5 308.67 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/3 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
267.245 274.193 mo
247.555 292.383 li
260.645 292.283 li
260.825 314.323 li
274.315 314.213 li
274.135 292.173 li
287.235 292.063 li
267.245 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
345.184 313.118 mo
331.693 313.118 li
331.624 304.618 li
345.115 304.618 li
345.184 313.118 li
345.096 302.368 mo
331.605 302.368 li
331.535 293.723 li
318.445 293.823 li
338.135 275.633 li
358.125 293.503 li
345.025 293.613 li
345.096 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
345.115 304.618 mo
331.624 304.618 li
331.605 302.368 li
345.096 302.368 li
345.115 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
331.715 315.763 mo
331.712 315.368 li
345.203 315.368 li
345.205 315.653 li
331.715 315.763 li
.575341 .0712596 .0630503 0 cmyk
f
345.203 315.368 mo
331.712 315.368 li
331.693 313.118 li
345.184 313.118 li
345.203 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
338.135 275.633 mo
318.445 293.823 li
331.535 293.723 li
331.715 315.763 li
345.205 315.653 li
345.025 293.613 li
358.125 293.503 li
338.135 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
345.309 313.118 mo
345.184 313.118 li
345.115 304.618 li
345.24 304.618 li
345.309 313.118 li
331.693 313.118 mo
331.568 313.118 li
331.499 304.618 li
331.624 304.618 li
331.693 313.118 li
345.221 302.368 mo
345.096 302.368 li
345.025 293.613 li
358.125 293.503 li
338.135 275.633 li
318.445 293.823 li
331.535 293.723 li
331.605 302.368 li
331.48 302.368 li
331.411 293.849 li
318.446 293.948 li
318.329 293.869 li
318.36 293.732 li
338.05 275.541 li
338.135 275.545 li
338.218 275.54 li
358.208 293.41 li
358.242 293.547 li
358.126 293.628 li
345.151 293.737 li
345.221 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
345.24 304.618 mo
345.115 304.618 li
345.096 302.368 li
345.221 302.368 li
345.24 304.618 li
331.624 304.618 mo
331.499 304.618 li
331.48 302.368 li
331.605 302.368 li
331.624 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
331.716 315.888 mo
331.59 315.764 li
331.587 315.368 li
331.712 315.368 li
331.715 315.763 li
345.205 315.653 li
345.203 315.368 li
345.328 315.368 li
345.33 315.652 li
345.294 315.741 li
345.206 315.778 li
331.716 315.888 li
.575341 .0712596 .0630503 0 cmyk
f
345.328 315.368 mo
345.203 315.368 li
345.184 313.118 li
345.309 313.118 li
345.328 315.368 li
331.712 315.368 mo
331.587 315.368 li
331.568 313.118 li
331.693 313.118 li
331.712 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
336.695 274.193 mo
317.005 292.383 li
330.095 292.283 li
330.275 314.323 li
343.765 314.213 li
343.585 292.173 li
356.685 292.063 li
336.695 274.193 li
eclp
357.285 273.273 mo
357.615 314.853 li
316.435 315.183 li
316.095 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [419.31 518.5 378.12 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /4 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
419.31 518.5 378.12 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/4 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
336.695 274.193 mo
317.005 292.383 li
330.095 292.283 li
330.275 314.323 li
343.765 314.213 li
343.585 292.173 li
356.685 292.063 li
336.695 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
416.054 313.118 mo
402.563 313.118 li
402.494 304.618 li
415.985 304.618 li
416.054 313.118 li
415.966 302.368 mo
402.476 302.368 li
402.405 293.723 li
389.305 293.823 li
409.005 275.633 li
428.995 293.503 li
415.895 293.613 li
415.966 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
415.985 304.618 mo
402.494 304.618 li
402.476 302.368 li
415.966 302.368 li
415.985 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
402.585 315.763 mo
402.582 315.368 li
416.073 315.368 li
416.075 315.653 li
402.585 315.763 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[16 0 0 3 339.29 145.859 ]ct
snap_to_device
<<
/T 1
/W 16 
/H 3 
/M[16 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~PER"-PER"-PER"-PER"-P8t[-P8t[-P8t[-P8t[-*?C?-*?C?-*?C?-*?C?-~>
<~&eYrq&eYrq&eYrq&eYrq&f)5q&f)5q&f)5q&f)5q()@Mq()@Mq()@Mq()@Mq~>
<~&.fWo&.fWo&.fWo&.fWo&/Q,o&/Q,o&/Q,o&/Q,o(DdVo(DdVo(DdVo(DdVo~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
416.073 315.368 mo
402.582 315.368 li
402.563 313.118 li
416.054 313.118 li
416.073 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
gsave
409.005 275.633 mo
389.305 293.823 li
402.405 293.723 li
402.585 315.763 li
416.075 315.653 li
415.895 293.613 li
428.995 293.503 li
409.005 275.633 li
-61.8551 -30.4366 mo
534.395 -30.4366 li
534.395 812.563 li
-61.8551 812.563 li
-61.8551 -30.4366 li
eclp
416.179 313.118 mo
416.054 313.118 li
415.985 304.618 li
416.11 304.618 li
416.179 313.118 li
402.563 313.118 mo
402.438 313.118 li
402.369 304.618 li
402.494 304.618 li
402.563 313.118 li
416.091 302.368 mo
415.966 302.368 li
415.895 293.613 li
428.995 293.503 li
409.005 275.633 li
389.305 293.823 li
402.405 293.723 li
402.476 302.368 li
402.35 302.368 li
402.281 293.849 li
389.306 293.948 li
389.189 293.869 li
389.22 293.732 li
408.92 275.541 li
409.005 275.545 li
409.088 275.54 li
429.078 293.41 li
429.112 293.547 li
428.996 293.628 li
416.021 293.737 li
416.091 302.368 li
.0866102 .0627756 .0674144 0 cmyk
f
416.11 304.618 mo
415.985 304.618 li
415.966 302.368 li
416.091 302.368 li
416.11 304.618 li
402.494 304.618 mo
402.369 304.618 li
402.35 302.368 li
402.476 302.368 li
402.494 304.618 li
.512016 .426917 .426917 .0699474 cmyk
f
402.586 315.888 mo
402.46 315.764 li
402.457 315.368 li
402.582 315.368 li
402.585 315.763 li
416.075 315.653 li
416.073 315.368 li
416.198 315.368 li
416.2 315.652 li
416.164 315.741 li
416.076 315.778 li
402.586 315.888 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[16 0 0 3 339.29 145.859 ]ct
snap_to_device
<<
/T 1
/W 16 
/H 3 
/M[16 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~PER"-PER"-PER"-PER"-P8t[-P8t[-P8t[-P8t[-*?C?-*?C?-*?C?-*?C?-~>
<~&eYrq&eYrq&eYrq&eYrq&f)5q&f)5q&f)5q&f)5q()@Mq()@Mq()@Mq()@Mq~>
<~&.fWo&.fWo&.fWo&.fWo&/Q,o&/Q,o&/Q,o&/Q,o(DdVo(DdVo(DdVo(DdVo~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
416.198 315.368 mo
416.073 315.368 li
416.054 313.118 li
416.179 313.118 li
416.198 315.368 li
402.582 315.368 mo
402.457 315.368 li
402.438 313.118 li
402.563 313.118 li
402.582 315.368 li
.512016 .426917 .426917 .0699474 cmyk
f
grestore
gsave
407.565 274.193 mo
387.865 292.383 li
400.965 292.283 li
401.145 314.323 li
414.635 314.213 li
414.455 292.173 li
427.555 292.063 li
407.565 274.193 li
eclp
428.145 273.273 mo
428.485 314.853 li
387.305 315.183 li
386.965 273.603 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [490.17 518.5 448.99 518.17 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /5 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
490.17 518.5 448.99 518.17 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/5 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
407.565 274.193 mo
387.865 292.383 li
400.965 292.283 li
401.145 314.323 li
414.635 314.213 li
414.455 292.173 li
427.555 292.063 li
407.565 274.193 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
2.25 lw
73.3949 91.2533 mo
159.145 91.2533 li
159.145 5.5033 li
73.3949 5.5033 li
73.3949 91.2533 li
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
79.7849 78.2533 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
95.6637 78.2533 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
111.792 78.2533 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
122.456 78.2533 mo
(e)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
137.555 78.2533 mo
(0)sh
gsave
115.915 93.3734 mo
96.0748 113.223 li
109.175 113.223 li
109.175 165.663 li
122.665 165.663 li
122.665 113.223 li
135.765 113.223 li
115.915 93.3734 li
eclp
95.3249 166.413 mo
136.51 166.413 li
136.51 92.6302 li
95.3249 92.6302 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [198.37 683.05 157.18 683.05 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /6 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
198.37 683.05 157.18 683.05 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/6 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
.25 lw
115.915 93.3733 mo
96.0749 113.223 li
109.175 113.223 li
109.175 165.663 li
122.665 165.663 li
122.665 113.223 li
135.765 113.223 li
115.915 93.3733 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
gsave
229.305 93.3734 mo
209.465 113.223 li
222.555 113.223 li
222.555 165.663 li
236.055 165.663 li
236.055 113.223 li
249.145 113.223 li
229.305 93.3734 li
eclp
208.715 166.413 mo
249.9 166.413 li
249.9 92.6302 li
208.715 92.6302 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [311.75 683.05 270.57 683.05 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /7 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
311.75 683.05 270.57 683.05 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/7 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
229.305 93.3733 mo
209.465 113.223 li
222.555 113.223 li
222.555 165.663 li
236.055 165.663 li
236.055 113.223 li
249.145 113.223 li
229.305 93.3733 li
cp
@
gsave
342.685 93.3734 mo
322.845 113.223 li
335.945 113.223 li
335.945 165.663 li
349.435 165.663 li
349.435 113.223 li
362.535 113.223 li
342.685 93.3734 li
eclp
322.095 166.413 mo
363.28 166.413 li
363.28 92.6302 li
322.095 92.6302 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [425.14 683.05 383.95 683.05 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /8 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
425.14 683.05 383.95 683.05 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/8 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
342.685 93.3733 mo
322.845 113.223 li
335.945 113.223 li
335.945 165.663 li
349.435 165.663 li
349.435 113.223 li
362.535 113.223 li
342.685 93.3733 li
cp
@
200.955 151.483 mo
257.648 151.483 li
257.648 116.05 li
200.955 116.05 li
cp
.483131 0 .939818 0 cmyk
ef
2.25 lw
200.955 151.483 mo
257.648 151.483 li
257.648 116.05 li
200.955 116.05 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
204.815 139.773 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
215.395 139.773 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
225.535 139.773 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
243.655 139.773 mo
(0)sh
314.345 151.483 mo
371.038 151.483 li
371.038 116.05 li
314.345 116.05 li
cp
.720088 .130068 0 0 cmyk
ef
314.345 151.483 mo
371.038 151.483 li
371.038 116.05 li
314.345 116.05 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
318.195 139.773 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
328.785 139.773 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
338.915 139.773 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
357.045 139.773 mo
(0)sh
186.075 91.2533 mo
271.825 91.2533 li
271.825 5.5033 li
186.075 5.5033 li
186.075 91.2533 li
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
192.455 78.2533 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
208.334 78.2533 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
224.462 78.2533 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
235.126 78.2533 mo
(e)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
250.235 78.2533 mo
(1)sh
300.165 90.5433 mo
385.915 90.5433 li
385.915 4.79327 li
300.165 4.79327 li
300.165 90.5433 li
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
306.555 77.5433 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
322.434 77.5433 mo
(o)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
338.562 77.5433 mo
(r)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
349.226 77.5433 mo
(e)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
364.325 77.5433 mo
(2)sh
203.795 52.9833 mo
260.488 52.9833 li
260.488 17.5503 li
203.795 17.5503 li
cp
.483131 0 .939818 0 cmyk
ef
203.795 52.9833 mo
260.488 52.9833 li
260.488 17.5503 li
203.795 17.5503 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
207.645 41.2633 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
218.235 41.2633 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
228.365 41.2633 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
246.495 41.2633 mo
(0)sh
317.175 52.9833 mo
373.868 52.9833 li
373.868 17.5503 li
317.175 17.5503 li
cp
.720088 .130068 0 0 cmyk
ef
317.175 52.9833 mo
373.868 52.9833 li
373.868 17.5503 li
317.175 17.5503 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
321.035 41.2633 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
331.615 41.2633 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
341.755 41.2633 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
359.875 41.2633 mo
(0)sh
62.0549 203.223 mo
118.748 203.223 li
118.748 167.79 li
62.0549 167.79 li
cp
.00482185 .265995 1 0 cmyk
ef
62.0549 203.223 mo
118.748 203.223 li
118.748 167.79 li
62.0549 167.79 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
65.9149 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
76.4949 191.503 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
86.6349 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
104.765 191.503 mo
(0)sh
62.0549 238.653 mo
118.748 238.653 li
118.748 203.22 li
62.0549 203.22 li
cp
.00482185 .265995 1 0 cmyk
ef
62.0549 238.653 mo
118.748 238.653 li
118.748 203.22 li
62.0549 203.22 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
65.9149 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
76.4949 226.933 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
86.6349 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
104.765 226.933 mo
(0)sh
118.755 238.653 mo
175.448 238.653 li
175.448 203.22 li
118.755 203.22 li
cp
gsave
grestore
/237753672.0 
<<
/ID /237753672.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 -32 -61.8551 463.423 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J-97G&JPpI7"c-a&@=h8#mQ("ToeIp*YSs:^uDU9`)7`pM8l=[M!U!,*0@t2EX5k,"=mUZ#9in^WadiO
$>/lp&>FA$'@4H\C(QY@(ELg)P^6$57n4Fm"B9Bjn3]m@#V-PGrG2TXY6SjZb4';])Qs?\_2@_g]G@[S
C(nCZ;KrkY"KT?Wn3XbuY61i@g@-l1$a0W4^mgk(&WHellbI9)(;'dR!:.EMn-6N*XajdT(\WR[TmgZ^
H5G.do:^PF?MMkTg?c<L]lYo%$dV01d(FHR%1Bp;ma/Rf0$Od-6L)q/F=rO\T4m@i"b^q^$^\3Sgc7G@
IcHL0gi7L-*QJ\k\DZ_8qi1Ts'=coqpD^l<_fN+-]8#(G,<LY0#4<Ea4)f!tmbt>R[g'1og`!AS\8"@T
_5@]l-Bn3)RP7P>BLG=;6t\nWCd_l'7U.oa63%=U(mtmrE+?o'$&o7A-7cAF4,,"?@Dh4@rpCUX&V1N1
nI^0](U4Qt&JoF!FW?`&iGfsOKtKBL6\VU$>!qDA5$:87N/l[/'3G<;c,Fcm<l@F;%Y0'~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/237753672.0 /Pattern get_res
[1 0 0 -1 -61.8551 -30.4367 ]make_pattern set_pattern
ef
2 vmreclaim
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
118.755 238.653 mo
175.448 238.653 li
175.448 203.22 li
118.755 203.22 li
cp
false sop
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
122.605 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
133.195 226.933 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
143.325 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
161.455 226.933 mo
(1)sh
118.755 203.223 mo
175.448 203.223 li
175.448 167.79 li
118.755 167.79 li
cp
gsave
grestore
/237753868.0 
<<
/ID /237753868.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 -32 -61.8551 463.423 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J-97G&JPpI7"c-a&@=h8#mQ("ToeIp*YSs:^uDU9`)7`pM8l=[M!U!,*0@t2EX5h;*8h%"-/d0A1]]P*
0.(QCR&Y!_S%g:Z!.;R`5G/N8T[O&q=\,&).;B2l[\5Wd;VVtkF^+qEV2,0d!I]3<A#<E6($"DL6"h+e
Q^3C1TOhGY=p+jDJBlDeVI0UobQ<Cs27[*7(]h&)!$DSA#52km1FbAmAQ0OEc-%Tpb)WYC;#j@!40rY#
R\AiL<1qbPDH`qBW-rp@#Qg1jrL8")hiKFZo`k>HEo4Acj=A7J5S]Xtm+i"]:l0#R-p!#cQVkTK,@3E_
!49P&B(FD6,`?<360TZM]e0ge.e2a7"m,s"2sQe1$&`<k:d;g3jSp21n=7-U_#Q0V$0sDhVF"aDfa3lS
R%h,XB*9P10+aL9%&O)pbn;If5cD+["U%XOY#.L$'FN%%:_3_#J?H4K.V*iV/Wo9`*fDP5H>lBKdd\B3
!8:g4XO;-W.1;&EUejZMlK'H7&s0c=8jNG:Qj`4:`hlGi!ka&6~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/237753868.0 /Pattern get_res
[1 0 0 -1 -61.8551 -30.4367 ]make_pattern set_pattern
ef
2 vmreclaim
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
118.755 203.223 mo
175.448 203.223 li
175.448 167.79 li
118.755 167.79 li
cp
false sop
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
122.605 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
133.195 191.503 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
143.325 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
161.455 191.503 mo
(1)sh
232.135 203.223 mo
288.828 203.223 li
288.828 167.79 li
232.135 167.79 li
cp
.483131 0 .939818 0 cmyk
ef
232.135 203.223 mo
288.828 203.223 li
288.828 167.79 li
232.135 167.79 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
235.995 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
246.575 191.503 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
256.715 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
274.845 191.503 mo
(0)sh
232.135 238.653 mo
288.828 238.653 li
288.828 203.22 li
232.135 203.22 li
cp
.483131 0 .939818 0 cmyk
ef
232.135 238.653 mo
288.828 238.653 li
288.828 203.22 li
232.135 203.22 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
235.995 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
246.575 226.933 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
256.715 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
274.845 226.933 mo
(0)sh
175.445 238.653 mo
232.138 238.653 li
232.138 203.22 li
175.445 203.22 li
cp
gsave
grestore
/243418008.0 
<<
/ID /243418008.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 -32 -61.8551 463.423 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J-97G&JPpI7"c-a&@=h8#mQ("ToeIp*YSs:^uDU9`)7`pM8l=[M!U!,*0@t2EX5bK>QB.9a7$Qtc<iN#
9kKS:gu<`9Skc3TRLJbB2k<dDo'/pfQU$teWH?h$5,g]G;/3L"eRH'dVcW&(\ijAl:pJWR[G*j5ZXC(8
mFEbPY2O-+>:oQ<D<g@o]3d48>Ku%%L8T\i!>jAo",t2)J/Ko"'EaR"&KbOWbNoc@c=[^h%3CHD!CT-D
Geb@_!!LJq!87DQ-U@P4C*-j.E'%R9aT;,4D,0[l%G,B96!^ujF;WU52B`O&?ZZt%^;F.drmO*,%e`:n
GMZO`*7Ork3p^gBp)DbB4Z[ZB"6p?rIN/m-!!!pcJY3$0!C%\,?3%bp#Z?))0D#7:L>WDD)uq;Dp0Ks2
fOb,uYNt]fKg5c-s+\m_pBi4nM>.'>E;0JG+(5-L#G5CK!<.]Q#Z^pqE!Uq,#QP-TI><rP!$]5in,P.6
ELHMHJ0A@p(.h%&~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/243418008.0 /Pattern get_res
[1 0 0 -1 -61.8551 -30.4367 ]make_pattern set_pattern
ef
2 vmreclaim
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
175.445 238.653 mo
232.138 238.653 li
232.138 203.22 li
175.445 203.22 li
cp
false sop
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
179.295 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
189.885 226.933 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
200.025 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
218.145 226.933 mo
(1)sh
288.835 238.653 mo
345.528 238.653 li
345.528 203.22 li
288.835 203.22 li
cp
gsave
grestore
/243418204.0 
<<
/ID /243418204.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 -32 -61.8551 463.423 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J-97G&JPpI7"c-a&@=h8#mQ("ToeIp*YSs:^uDU9`)7`pM8l=[M!U!,*0@t2EX5bK>q_O.+63+Nb%WQ"
9BO]+S*k>XS^-EiM@B360VZhUo,6p&Q2m`,WV%0X6CUHDe`g&EV.OF:Y#_Q')Z=-e4K[#s[X/1X`Ds>#
XL=Q<`p7QH=tFkJe\^imZX5;nH_'U3ID"M$pM=.8"bFSNW#4l]6Q:`oAhc;^Sne@KbMk>QD%90p@Xrt
~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/243418204.0 /Pattern get_res
[1 0 0 -1 -61.8551 -30.4367 ]make_pattern set_pattern
ef
2 vmreclaim
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
288.835 238.653 mo
345.528 238.653 li
345.528 203.22 li
288.835 203.22 li
cp
false sop
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
292.685 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
303.275 226.933 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
313.405 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
331.535 226.933 mo
(1)sh
288.835 203.223 mo
345.528 203.223 li
345.528 167.79 li
288.835 167.79 li
cp
.720088 .130068 0 0 cmyk
ef
288.835 203.223 mo
345.528 203.223 li
345.528 167.79 li
288.835 167.79 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
292.685 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
303.275 191.503 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
313.405 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
331.535 191.503 mo
(0)sh
345.525 203.223 mo
402.218 203.223 li
402.218 167.79 li
345.525 167.79 li
cp
.720088 .130068 0 0 cmyk
ef
345.525 203.223 mo
402.218 203.223 li
402.218 167.79 li
345.525 167.79 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
349.375 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
359.965 191.503 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
370.105 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
388.225 191.503 mo
(0)sh
345.525 238.653 mo
402.218 238.653 li
402.218 203.22 li
345.525 203.22 li
cp
.720088 .130068 0 0 cmyk
ef
345.525 238.653 mo
402.218 238.653 li
402.218 203.22 li
345.525 203.22 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
349.375 226.933 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
359.965 226.933 mo
(2)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
370.105 226.933 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
388.225 226.933 mo
(0)sh
90.4049 52.9833 mo
147.098 52.9833 li
147.098 17.5503 li
90.4049 17.5503 li
cp
gsave
grestore
/243418400.0 
<<
/ID /243418400.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 61.8551 463.423 ]ct
[32 0 0 -32 -61.8551 463.423 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J-97G&JPpI7"c-a&@=h8#mQ("ToeIp*YSs:^uDU9`)7`pM8l=[M!U!,*0@t2EX5bK>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GQ$8#0$s<4ZX!SPQ1`C/m<k<hBB~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/243418400.0 /Pattern get_res
[1 0 0 -1 -61.8551 -30.4367 ]make_pattern set_pattern
ef
2 vmreclaim
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
90.4049 52.9833 mo
147.098 52.9833 li
147.098 17.5503 li
90.4049 17.5503 li
cp
false sop
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
94.2649 41.2633 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
104.845 41.2633 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
114.985 41.2633 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
133.105 41.2633 mo
(1)sh
175.445 203.223 mo
232.138 203.223 li
232.138 167.79 li
175.445 167.79 li
cp
.483131 0 .939818 0 cmyk
ef
175.445 203.223 mo
232.138 203.223 li
232.138 167.79 li
175.445 167.79 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
179.295 191.503 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
189.885 191.503 mo
(1)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
200.025 191.503 mo
(W)sh
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
218.145 191.503 mo
(0)sh
87.5749 150.773 mo
144.268 150.773 li
144.268 115.34 li
87.5749 115.34 li
cp
.00482185 .265995 1 0 cmyk
ef
87.5749 150.773 mo
144.268 150.773 li
144.268 115.34 li
87.5749 115.34 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
1 sep
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
91.4249 139.063 mo
(C)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
102.015 139.063 mo
(0)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
112.145 139.063 mo
(W)sh
SBCYBR+CALIBRI,Bold*1 [20.0002 0 0 -20.0002 0 0 ]msf
130.275 139.063 mo
(0)sh
gsave
112.625 281.703 mo
89.4448 279.893 li
97.2249 294.143 li
80.8049 304.763 li
102.615 309.643 li
105.015 324.703 li
124.425 316.543 li
143.835 324.703 li
146.225 309.643 li
168.035 304.763 li
151.615 294.143 li
159.395 279.893 li
136.525 281.703 li
124.425 268.823 li
112.625 281.703 li
eclp
80.0549 325.453 mo
168.781 325.453 li
168.781 268.07 li
80.0549 268.07 li
cp
level3{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
<<
/PatternType 2
/Shading
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [186.28 487.11 186.28 544.49 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /9 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -61.8551 812.563 ]ct
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
190 172 166 229 ]
>>
186.28 487.11 186.28 544.49 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/9 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
.25 lw
112.625 281.703 mo
89.4449 279.893 li
97.2249 294.143 li
80.8049 304.763 li
102.615 309.643 li
105.015 324.703 li
124.425 316.543 li
143.835 324.703 li
146.225 309.643 li
168.035 304.763 li
151.615 294.143 li
159.395 279.893 li
136.525 281.703 li
124.425 268.823 li
112.625 281.703 li
cp
1 /4 /CSD get_res sepcs
.749 sep
@
1 /4 /CSD get_res sepcs
0 sep
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
98.4649 305.763 mo
(s)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
110.433 305.763 mo
(t)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
120.833 305.763 mo
(a)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
135.643 305.763 mo
(l)sh
SBCYBR+CALIBRI,Bold*1 [30.0002 0 0 -30.0002 0 0 ]msf
143.011 305.763 mo
(l)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 /4 ]]
[/Pattern [/237753672.0 /237753868.0 /243418008.0 /243418204.0 /243418400.0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 ]]
] del_res
/SBCYBR+CALIBRI,Bold*1 uf
/SBCYBR+CALIBRI,Bold uf
/DMSAAA+CALIBRI,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
